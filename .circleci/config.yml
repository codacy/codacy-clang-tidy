version: 2.1

orbs:
  codacy: codacy/base@2.9.3
  codacy_plugins_test: codacy/plugins-test@0.10.6

jobs:
  e2e_test:
    machine:
      image: ubuntu-1604:201903-01
    resource_class: 2xlarge
    # xlarge
    working_directory: ~/workdir/
    steps:
      - attach_workspace:
          at: ~/workdir
      - run:
          name: Prepare microk8s
          no_output_timeout: 1200
          command: |
            sudo apt update && sudo apt install nfs-common -y
            sudo snap install microk8s --classic --channel=1.15/stable
            sudo usermod -a -G microk8s $USER
            sudo su $USER -c "mkdir -p /var/snap/microk8s/current/args"
            sudo su $USER -c "echo '--allow-privileged=true' >> /var/snap/microk8s/current/args/kube-apiserver"
            sudo su $USER -c "/snap/bin/microk8s.status --wait-ready --timeout 300"
            sudo su $USER -c "/snap/bin/microk8s.enable dns"
            sudo su $USER -c "/snap/bin/microk8s.enable storage"
            sudo su $USER -c "/snap/bin/microk8s.enable ingress"
            sudo su $USER -c "/snap/bin/microk8s.status --wait-ready --timeout 300"
            sudo su $USER -c "/snap/bin/microk8s.stop"
            sudo su $USER -c "/snap/bin/microk8s.start"
            sudo su $USER -c "/snap/bin/microk8s.status --wait-ready --timeout 300"

            # Install helm
            sudo snap install helm --classic --channel=2.16/stable

            sleep 5
            sudo su $USER -c "/snap/bin/microk8s.kubectl create serviceaccount --namespace kube-system tiller"
            sudo su $USER -c "/snap/bin/microk8s.kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller"
            sudo su $USER -c "/snap/bin/helm init --service-account tiller"

            sleep 5

            # Final checks
            sudo su $USER -c "/snap/bin/microk8s.kubectl wait -n kube-system --for=condition=Ready pod -l k8s-app=kube-dns"
            sudo su $USER -c "/snap/bin/microk8s.kubectl wait -n kube-system --for=condition=Ready pod -l k8s-app=hostpath-provisioner"
            sudo su $USER -c "/snap/bin/microk8s.kubectl wait -n default --for=condition=Ready pod -l name=nginx-ingress-microk8s"
            sudo su $USER -c "/snap/bin/microk8s.kubectl -n kube-system wait --for=condition=Ready pod -l name=tiller"

            # Install kubectl
            sudo apt-get update && sudo apt-get install -y apt-transport-https gnupg2
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
            sudo apt-get update
            sudo apt-get install -y kubectl

            # Create codacy namespace
            sudo su $USER -c "/snap/bin/microk8s.kubectl create namespace codacy"
            # Set docker credentials
            sudo su $USER -c "/snap/bin/microk8s.kubectl create secret docker-registry docker-credentials --docker-username=$DOCKER_USER --docker-password=$DOCKER_PASS --namespace codacy"

            # Get values-production.yaml
            wget https://raw.githubusercontent.com/codacy/chart/master/codacy/values-production.yaml

            # Install Codacy!
            # TODO set codacy version
            sudo su $USER -c "/snap/bin/helm repo add codacy-stable https://charts.codacy.com/stable/"
            sudo su $USER -c "/snap/bin/helm repo update"
            sudo su $USER -c "/snap/bin/helm upgrade --install codacy codacy-stable/codacy --version '0.5.0' --namespace codacy --atomic --debug --wait --values values-production.yaml --values /home/circleci/workdir/test-microk8s.yaml --timeout=1800"

            # is everything running?
            sudo su $USER -c "/snap/bin/microk8s.kubectl get pods"

            curl localhost

workflows:
  version: 2
  compile_test_deploy:
    jobs:
      - codacy/checkout_and_version:
          write_sbt_version: true
      - e2e_test:
          context: CodacyDocker
          requires:
            - codacy/checkout_and_version          
      # - codacy/sbt:
      #     name: populate_cache
      #     persist_to_workspace: true
      #     cmd: sbt ";set scalafmtUseIvy in ThisBuild := false;update"
      #     requires:
      #       - codacy/checkout_and_version
      # - codacy/sbt:
      #     name: check_fmt
      #     cmd: sbt scalafmt::test test:scalafmt::test sbt:scalafmt::test
      #     requires:
      #       - populate_cache
      # - codacy/sbt:
      #     name: compile
      #     persist_to_workspace: true
      #     cmd: sbt compile
      #     requires:
      #       - populate_cache
      # - codacy/sbt:
      #     name: test_and_coverage
      #     cmd: |
      #       sbt coverage test coverageReport
      #       sbt coverageAggregate
      #       bash <(curl -Ls https://coverage.codacy.com/get.sh) report --skip
      #     requires:
      #       - compile
      # - codacy/sbt:
      #     name: package_artifacts
      #     persist_to_workspace: true
      #     cmd: |
      #       sbt "graalvm-native-image:packageBin"
      #       sbt "assembly"

      #       mkdir -p ~/workdir/artifacts/
      #       mv target/scala-2.13/codacy-clang-tidy-assembly-$(cat .version).jar ~/workdir/artifacts/codacy-clang-tidy-$(cat .version).jar
      #       mv target/graalvm-native-image/codacy-clang-tidy ~/workdir/artifacts/codacy-clang-tidy-$(cat .version)
      #     requires:
      #       - check_fmt
      #       - test_and_coverage
      # - codacy/shell:
      #     name: docker_publish_local
      #     cmd: |
      #       docker build -t codacy-clang-tidy .
      #       docker save --output docker-image.tar $CIRCLE_PROJECT_REPONAME:latest
      #     persist_to_workspace: true
      #     requires:
      #       - package_artifacts
      # - codacy_plugins_test/run:
      #     name: plugins_test
      #     run_pattern_tests: false
      #     requires:
      #       - docker_publish_local
      # - codacy/publish_docker:
      #     name: publish_dockerhub
      #     filters:
      #       branches:
      #         only:
      #           - master
      #     context: CodacyAWS
      #     requires:
      #       - plugins_test
      # - codacy/publish_ghr:
      #     name: publish_ghr
      #     path: ~/workdir/artifacts/
      #     filters:
      #       branches:
      #         only:
      #           - master
      #     context: CodacyGitHub
      #     requires:
      #       - plugins_test
