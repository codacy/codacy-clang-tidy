[ {
  "patternId" : "abseil-duration-addition",
  "title" : "Abseil duration addition",
  "description" : "  # abseil-duration-addition  Check for cases where addition should be performed in the `absl::Time` domain",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-duration-comparison",
  "title" : "Abseil duration comparison",
  "description" : "  # abseil-duration-comparison  Checks for comparisons which should be in the `absl::Duration` domain instead of the floating point or integer domains",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-duration-conversion-cast",
  "title" : "Abseil duration conversion cast",
  "description" : "  # abseil-duration-conversion-cast  Checks for casts of `absl::Duration` conversion functions, and recommends the right conversion function instead",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-duration-division",
  "title" : "Abseil duration division",
  "description" : "  # abseil-duration-division  `absl::Duration` arithmetic works like it does with integers",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-duration-factory-float",
  "title" : "Abseil duration factory float",
  "description" : "  # abseil-duration-factory-float  Checks for cases where the floating-point overloads of various `absl::Duration` factory functions are called when the more-efficient integer versions could be used instead",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-duration-factory-scale",
  "title" : "Abseil duration factory scale",
  "description" : "  # abseil-duration-factory-scale  Checks for cases where arguments to `absl::Duration` factory functions are scaled internally and could be changed to a different factory function",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-duration-subtraction",
  "title" : "Abseil duration subtraction",
  "description" : "  # abseil-duration-subtraction  Checks for cases where subtraction should be performed in the `absl::Duration` domain",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-duration-unnecessary-conversion",
  "title" : "Abseil duration unnecessary conversion",
  "description" : "  # abseil-duration-unnecessary-conversion  Finds and fixes cases where `absl::Duration` values are being converted to numeric types and back again",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-faster-strsplit-delimiter",
  "title" : "Abseil faster strsplit delimiter",
  "description" : "  # abseil-faster-strsplit-delimiter  Finds instances of `absl::StrSplit()` or `absl::MaxSplits()` where the delimiter is a single character string literal and replaces with a character",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-no-internal-dependencies",
  "title" : "Abseil no internal dependencies",
  "description" : "Warns if code using Abseil depends on internal details",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-no-namespace",
  "title" : "Abseil no namespace",
  "description" : "  # abseil-no-namespace  Ensures code does not open `namespace absl` as that violates Abseil's compatibility guidelines",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-redundant-strcat-calls",
  "title" : "Abseil redundant strcat calls",
  "description" : "  # abseil-redundant-strcat-calls  Suggests removal of unnecessary calls to `absl::StrCat` when the result is being passed to another call to `absl::StrCat` or `absl::StrAppend`",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-str-cat-append",
  "title" : "Abseil str cat append",
  "description" : "  # abseil-str-cat-append  Flags uses of `absl::StrCat()` to append to a `std::string`",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-string-find-startswith",
  "title" : "Abseil string find startswith",
  "description" : "  # abseil-string-find-startswith  Checks whether a `std::string::find()` result is compared with 0, and suggests replacing with `absl::StartsWith()`",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-time-comparison",
  "title" : "Abseil time comparison",
  "description" : "  # abseil-time-comparison  Prefer comparisons in the `absl::Time` domain instead of the integer domain",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-time-subtraction",
  "title" : "Abseil time subtraction",
  "description" : "  # abseil-time-subtraction  Finds and fixes `absl::Time` subtraction expressions to do subtraction in the Time domain instead of the numeric domain",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-upgrade-duration-conversions",
  "title" : "Abseil upgrade duration conversions",
  "description" : "  # abseil-upgrade-duration-conversions  Finds calls to `absl::Duration` arithmetic operators and factories whose argument needs an explicit cast to continue compiling after upcoming API changes",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-accept",
  "title" : "Android cloexec accept",
  "description" : "  # android-cloexec-accept  The usage of `accept()` is not recommended, it's better to use `accept4()`",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-accept4",
  "title" : "Android cloexec accept4",
  "description" : "  # android-cloexec-accept4  `accept4()` should include `SOCK_CLOEXEC` in its type argument to avoid the file descriptor leakage",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-creat",
  "title" : "Android cloexec creat",
  "description" : "  # android-cloexec-creat  The usage of `creat()` is not recommended, it's better to use `open()`",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-dup",
  "title" : "Android cloexec dup",
  "description" : "  # android-cloexec-dup  The usage of `dup()` is not recommended, it's better to use `fcntl()`, which can set the close-on-exec flag",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-epoll-create",
  "title" : "Android cloexec epoll create",
  "description" : "  # android-cloexec-epoll-create  The usage of `epoll_create()` is not recommended, it's better to use `epoll_create1()`, which allows close-on-exec",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-epoll-create1",
  "title" : "Android cloexec epoll create1",
  "description" : "  # android-cloexec-epoll-create1  `epoll_create1()` should include `EPOLL_CLOEXEC` in its type argument to avoid the file descriptor leakage",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-fopen",
  "title" : "Android cloexec fopen",
  "description" : "  # android-cloexec-fopen  `fopen()` should include `e` in their mode string; so `re` would be valid",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-inotify-init",
  "title" : "Android cloexec inotify init",
  "description" : "  # android-cloexec-inotify-init  The usage of `inotify_init()` is not recommended, it's better to use `inotify_init1()`",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-inotify-init1",
  "title" : "Android cloexec inotify init1",
  "description" : "  # android-cloexec-inotify-init1  `inotify_init1()` should include `IN_CLOEXEC` in its type argument to avoid the file descriptor leakage",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-memfd-create",
  "title" : "Android cloexec memfd create",
  "description" : "  # android-cloexec-memfd-create  `memfd_create()` should include `MFD_CLOEXEC` in its type argument to avoid the file descriptor leakage",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-open",
  "title" : "Android cloexec open",
  "description" : "  # android-cloexec-open  A common source of security bugs is code that opens a file without using the `O_CLOEXEC` flag",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-pipe",
  "title" : "Android cloexec pipe",
  "description" : "  # android-cloexec-pipe  This check detects usage of `pipe()`",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-pipe2",
  "title" : "Android cloexec pipe2",
  "description" : "  # android-cloexec-pipe2  This checks ensures that pipe2() is called with the O_CLOEXEC flag",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-socket",
  "title" : "Android cloexec socket",
  "description" : "  # android-cloexec-socket  `socket()` should include `SOCK_CLOEXEC` in its type argument to avoid the file descriptor leakage",
  "parameters" : [ ]
}, {
  "patternId" : "android-comparison-in-temp-failure-retry",
  "title" : "Android comparison in temp failure retry",
  "description" : "  # android-comparison-in-temp-failure-retry  Diagnoses comparisons that appear to be incorrectly placed in the argument to the `TEMP_FAILURE_RETRY` macro",
  "parameters" : [ ]
}, {
  "patternId" : "boost-use-to-string",
  "title" : "Boost use to string",
  "description" : "  # boost-use-to-string  This check finds conversion from integer type like `int` to `std::string` or `std::wstring` using `boost::lexical_cast`, and replace it with calls to `std::to_string` and `std::to_wstring`",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-argument-comment",
  "title" : "Argument comment",
  "description" : "  # bugprone-argument-comment  Checks that argument comments match parameter names",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-assert-side-effect",
  "title" : "Assert side effect",
  "description" : "  # bugprone-assert-side-effect  Finds `assert()` with side effect",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-bad-signal-to-kill-thread",
  "title" : "Bad signal to kill thread",
  "description" : "  # bugprone-bad-signal-to-kill-thread  Finds `pthread_kill` function calls when a thread is terminated by raising `SIGTERM` signal and the signal kills the entire process, not just the individual thread",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-bool-pointer-implicit-conversion",
  "title" : "Bool pointer implicit conversion",
  "description" : "  # bugprone-bool-pointer-implicit-conversion  Checks for conditions based on implicit conversion from a `bool` pointer to `bool`",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-branch-clone",
  "title" : "Branch clone",
  "description" : "  # bugprone-branch-clone  Checks for repeated branches in `if/else if/else` chains, consecutive repeated branches in `switch` statements and identical true and false branches in conditional operators",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-copy-constructor-init",
  "title" : "Copy constructor init",
  "description" : "  # bugprone-copy-constructor-init  Finds copy constructors where the constructor doesn't call the copy constructor of the base class",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-dangling-handle",
  "title" : "Dangling handle",
  "description" : "  # bugprone-dangling-handle  Detect dangling references in value handles like `std::experimental::string_view`",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-dynamic-static-initializers",
  "title" : "Dynamic static initializers",
  "description" : "  # bugprone-dynamic-static-initializers  Finds instances of static variables that are dynamically initialized in header files",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-exception-escape",
  "title" : "Exception escape",
  "description" : "  # bugprone-exception-escape  Finds functions which may throw an exception directly or indirectly, but they should not",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-fold-init-type",
  "title" : "Fold init type",
  "description" : "  # bugprone-fold-init-type  The check flags type mismatches in folds like `std::accumulate` that might result in loss of precision",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-forward-declaration-namespace",
  "title" : "Forward declaration namespace",
  "description" : "  # bugprone-forward-declaration-namespace  Checks if an unused forward declaration is in a wrong namespace",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-forwarding-reference-overload",
  "title" : "Forwarding reference overload",
  "description" : "  # bugprone-forwarding-reference-overload  The check looks for perfect forwarding constructors that can hide copy or move constructors",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-inaccurate-erase",
  "title" : "Inaccurate erase",
  "description" : "  # bugprone-inaccurate-erase  Checks for inaccurate use of the `erase()` method",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-incorrect-roundings",
  "title" : "Incorrect roundings",
  "description" : "  # bugprone-incorrect-roundings  Checks the usage of patterns known to produce incorrect rounding",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-infinite-loop",
  "title" : "Infinite loop",
  "description" : "  # bugprone-infinite-loop  Finds obvious infinite loops (loops where the condition variable is not changed at all)",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-integer-division",
  "title" : "Integer division",
  "description" : "  # bugprone-integer-division  Finds cases where integer division in a floating point context is likely to cause unintended loss of precision",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-lambda-function-name",
  "title" : "Lambda function name",
  "description" : "  # bugprone-lambda-function-name  Checks for attempts to get the name of a function from within a lambda expression",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-macro-parentheses",
  "title" : "Macro parentheses",
  "description" : "  # bugprone-macro-parentheses  Finds macros that can have unexpected behaviour due to missing parentheses",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-macro-repeated-side-effects",
  "title" : "Macro repeated side effects",
  "description" : "  # bugprone-macro-repeated-side-effects  Checks for repeated argument with side effects in macros",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-misplaced-operator-in-strlen-in-alloc",
  "title" : "Misplaced operator in strlen in alloc",
  "description" : "  # bugprone-misplaced-operator-in-strlen-in-alloc  Finds cases where `1` is added to the string in the argument to `strlen()`, `strnlen()`, `strnlen_s()`, `wcslen()`, `wcsnlen()`, and `wcsnlen_s()` instead of the result and the value is used as an argument to a memory allocation function (`malloc()`, `calloc()`, `realloc()`, `alloca()`) or the `new[]` operator in C++",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-misplaced-widening-cast",
  "title" : "Misplaced widening cast",
  "description" : "  # bugprone-misplaced-widening-cast  This check will warn when there is a cast of a calculation result to a bigger type",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-move-forwarding-reference",
  "title" : "Move forwarding reference",
  "description" : "  # bugprone-move-forwarding-reference  Warns if `std::move` is called on a forwarding reference, for example:  ``` c++ template  void foo(T&& t) {   bar(std::move(t)); } ```  Forwarding references should typically be passed to `std::forward` instead of `std::move`, and this is the fix that will be suggested",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-multiple-statement-macro",
  "title" : "Multiple statement macro",
  "description" : "  # bugprone-multiple-statement-macro  Detect multiple statement macros that are used in unbraced conditionals",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-not-null-terminated-result",
  "title" : "Not null terminated result",
  "description" : "  # bugprone-not-null-terminated-result  Finds function calls where it is possible to cause a not null-terminated result",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-parent-virtual-call",
  "title" : "Parent virtual call",
  "description" : "  # bugprone-parent-virtual-call  Detects and fixes calls to grand-...parent virtual methods instead of calls to overridden parent's virtual methods",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-posix-return",
  "title" : "Posix return",
  "description" : "  # bugprone-posix-return  Checks if any calls to `pthread_*` or `posix_*` functions (except `posix_openpt`) expect negative return values",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-signed-char-misuse",
  "title" : "Signed char misuse",
  "description" : "  # bugprone-signed-char-misuse  Finds `signed char` -\\> integer conversions which might indicate a programming error",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-sizeof-container",
  "title" : "Sizeof container",
  "description" : "  # bugprone-sizeof-container  The check finds usages of `sizeof` on expressions of STL container types",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-sizeof-expression",
  "title" : "Sizeof expression",
  "description" : "  # bugprone-sizeof-expression  The check finds usages of `sizeof` expressions which are most likely errors",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-string-constructor",
  "title" : "String constructor",
  "description" : "  # bugprone-string-constructor  Finds string constructors that are suspicious and probably errors",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-string-integer-assignment",
  "title" : "String integer assignment",
  "description" : "  # bugprone-string-integer-assignment  The check finds assignments of an integer to `std::basic_string` (`std::string`, `std::wstring`, etc.)",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-string-literal-with-embedded-nul",
  "title" : "String literal with embedded nul",
  "description" : "  # bugprone-string-literal-with-embedded-nul  Finds occurrences of string literal with embedded NUL character and validates their usage",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-suspicious-enum-usage",
  "title" : "Suspicious enum usage",
  "description" : "  # bugprone-suspicious-enum-usage  The checker detects various cases when an enum is probably misused (as a bitmask )",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-suspicious-memset-usage",
  "title" : "Suspicious memset usage",
  "description" : "  # bugprone-suspicious-memset-usage  This check finds `memset()` calls with potential mistakes in their arguments",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-suspicious-missing-comma",
  "title" : "Suspicious missing comma",
  "description" : "  # bugprone-suspicious-missing-comma  String literals placed side-by-side are concatenated at translation phase 6 (after the preprocessor)",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-suspicious-semicolon",
  "title" : "Suspicious semicolon",
  "description" : "  # bugprone-suspicious-semicolon  Finds most instances of stray semicolons that unexpectedly alter the meaning of the code",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-suspicious-string-compare",
  "title" : "Suspicious string compare",
  "description" : "  # bugprone-suspicious-string-compare  Find suspicious usage of runtime string comparison functions",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-swapped-arguments",
  "title" : "Swapped arguments",
  "description" : "  # bugprone-swapped-arguments  Finds potentially swapped arguments by looking at implicit conversions",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-terminating-continue",
  "title" : "Terminating continue",
  "description" : "  # bugprone-terminating-continue  Detects do while loops with a condition always evaluating to false that have a continue statement, as this continue terminates the loop effectively",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-throw-keyword-missing",
  "title" : "Throw keyword missing",
  "description" : "  # bugprone-throw-keyword-missing  Warns about a potentially missing `throw` keyword",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-too-small-loop-variable",
  "title" : "Too small loop variable",
  "description" : "  # bugprone-too-small-loop-variable  Detects those `for` loops that have a loop variable with a \"too small\" type which means this type can't represent all values which are part of the iteration range",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-undefined-memory-manipulation",
  "title" : "Undefined memory manipulation",
  "description" : "  # bugprone-undefined-memory-manipulation  Finds calls of memory manipulation functions `memset()`, `memcpy()` and `memmove()` on not TriviallyCopyable objects resulting in undefined behavior",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-undelegated-constructor",
  "title" : "Undelegated constructor",
  "description" : "  # bugprone-undelegated-constructor  Finds creation of temporary objects in constructors that look like a function call to another constructor of the same class",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-unhandled-self-assignment",
  "title" : "Unhandled self assignment",
  "description" : "  # bugprone-unhandled-self-assignment  cert-oop54-cpp redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-unused-raii",
  "title" : "Unused raii",
  "description" : "  # bugprone-unused-raii  Finds temporaries that look like RAII objects",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-unused-return-value",
  "title" : "Unused return value",
  "description" : "  # bugprone-unused-return-value  Warns on unused function return values",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-use-after-move",
  "title" : "Use after move",
  "description" : "  # bugprone-use-after-move  Warns if an object is used after it has been moved, for example:  ``` c++ std::string str = \"Hello, world!\\n\"; std::vector messages; messages.emplace_back(std::move(str)); std::cout << str; ```  The last line will trigger a warning that `str` is used after it has been moved",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-virtual-near-miss",
  "title" : "Virtual near miss",
  "description" : "  # bugprone-virtual-near-miss  Warn if a function is a near miss (ie",
  "parameters" : [ ]
}, {
  "patternId" : "cert-dcl03-c",
  "title" : "Cert dcl03 c",
  "description" : "      # cert-dcl03-c  The cert-dcl03-c check is an alias, please see misc-static-assert for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cert-dcl16-c",
  "title" : "Cert dcl16 c",
  "description" : "      # cert-dcl16-c  The cert-dcl16-c check is an alias, please see readability-uppercase-literal-suffix for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cert-dcl21-cpp",
  "title" : "Cert dcl21 cpp",
  "description" : "  # cert-dcl21-cpp  This check flags postfix `operator++` and `operator--` declarations if the return type is not a const object",
  "parameters" : [ ]
}, {
  "patternId" : "cert-dcl50-cpp",
  "title" : "Cert dcl50 cpp",
  "description" : "  # cert-dcl50-cpp  This check flags all function definitions (but not declarations) of C-style variadic functions",
  "parameters" : [ ]
}, {
  "patternId" : "cert-dcl54-cpp",
  "title" : "Cert dcl54 cpp",
  "description" : "      # cert-dcl54-cpp  The cert-dcl54-cpp check is an alias, please see misc-new-delete-overloads for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cert-dcl58-cpp",
  "title" : "Cert dcl58 cpp",
  "description" : "  # cert-dcl58-cpp  Modification of the `std` or `posix` namespace can result in undefined behavior",
  "parameters" : [ ]
}, {
  "patternId" : "cert-dcl59-cpp",
  "title" : "Cert dcl59 cpp",
  "description" : "      # cert-dcl59-cpp  The cert-dcl59-cpp check is an alias, please see google-build-namespaces for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cert-env33-c",
  "title" : "Cert env33 c",
  "description" : "  # cert-env33-c  This check flags calls to `system()`, `popen()`, and `_popen()`, which execute a command processor",
  "parameters" : [ ]
}, {
  "patternId" : "cert-err09-cpp",
  "title" : "Cert err09 cpp",
  "description" : "      # cert-err09-cpp  The cert-err09-cpp check is an alias, please see misc-throw-by-value-catch-by-reference for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cert-err34-c",
  "title" : "Cert err34 c",
  "description" : "  # cert-err34-c  This check flags calls to string-to-number conversion functions that do not verify the validity of the conversion, such as `atoi()` or `scanf()`",
  "parameters" : [ ]
}, {
  "patternId" : "cert-err52-cpp",
  "title" : "Cert err52 cpp",
  "description" : "  # cert-err52-cpp  This check flags all call expressions involving `setjmp()` and `longjmp()`",
  "parameters" : [ ]
}, {
  "patternId" : "cert-err58-cpp",
  "title" : "Cert err58 cpp",
  "description" : "  # cert-err58-cpp  This check flags all `static` or `thread_local` variable declarations where the initializer for the object may throw an exception",
  "parameters" : [ ]
}, {
  "patternId" : "cert-err60-cpp",
  "title" : "Cert err60 cpp",
  "description" : "  # cert-err60-cpp  This check flags all throw expressions where the exception object is not nothrow copy constructible",
  "parameters" : [ ]
}, {
  "patternId" : "cert-err61-cpp",
  "title" : "Cert err61 cpp",
  "description" : "      # cert-err61-cpp  The cert-err61-cpp check is an alias, please see misc-throw-by-value-catch-by-reference for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cert-fio38-c",
  "title" : "Cert fio38 c",
  "description" : "      # cert-fio38-c  The cert-fio38-c check is an alias, please see misc-non-copyable-objects for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cert-flp30-c",
  "title" : "Cert flp30 c",
  "description" : "  # cert-flp30-c  This check flags `for` loops where the induction expression has a floating-point type",
  "parameters" : [ ]
}, {
  "patternId" : "cert-mem57-cpp",
  "title" : "Cert mem57 cpp",
  "description" : "  # cert-mem57-cpp  This check flags uses of default `operator new` where the type has extended alignment (an alignment greater than the fundamental alignment)",
  "parameters" : [ ]
}, {
  "patternId" : "cert-msc30-c",
  "title" : "Cert msc30 c",
  "description" : "      # cert-msc30-c  The cert-msc30-c check is an alias, please see cert-msc50-cpp for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cert-msc32-c",
  "title" : "Cert msc32 c",
  "description" : "      # cert-msc32-c  The cert-msc32-c check is an alias, please see cert-msc51-cpp for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cert-msc50-cpp",
  "title" : "Cert msc50 cpp",
  "description" : "  # cert-msc50-cpp  Pseudorandom number generators use mathematical algorithms to produce a sequence of numbers with good statistical properties, but the numbers produced are not genuinely random",
  "parameters" : [ ]
}, {
  "patternId" : "cert-msc51-cpp",
  "title" : "Cert msc51 cpp",
  "description" : "  # cert-msc51-cpp  This check flags all pseudo-random number engines, engine adaptor instantiations and `srand()` when initialized or seeded with default argument, constant expression or any user-configurable type",
  "parameters" : [ ]
}, {
  "patternId" : "cert-oop11-cpp",
  "title" : "Cert oop11 cpp",
  "description" : "      # cert-oop11-cpp  The cert-oop11-cpp check is an alias, please see performance-move-constructor-init for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cert-oop54-cpp",
  "title" : "Cert oop54 cpp",
  "description" : "      # cert-oop54-cpp  The cert-oop54-cpp check is an alias, please see bugprone-unhandled-self-assignment for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cert-oop58-cpp",
  "title" : "Cert oop58 cpp",
  "description" : "  # cert-oop58-cpp  Finds assignments to the copied object and its direct or indirect members in copy constructors and copy assignment operators",
  "parameters" : [ ]
}, {
  "patternId" : "cert-pos44-c",
  "title" : "Cert pos44 c",
  "description" : "      # cert-pos44-c  The cert-pos44-c check is an alias, please see bugprone-bad-signal-to-kill-thread for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.CallAndMessage",
  "title" : "Clang analyzer core CallAndMessage",
  "description" : "      # clang-analyzer-core.CallAndMessage  The clang-analyzer-core.CallAndMessage check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.DivideZero",
  "title" : "Clang analyzer core DivideZero",
  "description" : "      # clang-analyzer-core.DivideZero  The clang-analyzer-core.DivideZero check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.DynamicTypePropagation",
  "title" : "Clang analyzer core DynamicTypePropagation",
  "description" : "  # clang-analyzer-core.DynamicTypePropagation  Generate dynamic type information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.NonNullParamChecker",
  "title" : "Clang analyzer core NonNullParamChecker",
  "description" : "      # clang-analyzer-core.NonNullParamChecker  The clang-analyzer-core.NonNullParamChecker check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.NullDereference",
  "title" : "Clang analyzer core NullDereference",
  "description" : "      # clang-analyzer-core.NullDereference  The clang-analyzer-core.NullDereference check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.StackAddressEscape",
  "title" : "Clang analyzer core StackAddressEscape",
  "description" : "      # clang-analyzer-core.StackAddressEscape  The clang-analyzer-core.StackAddressEscape check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.UndefinedBinaryOperatorResult",
  "title" : "Clang analyzer core UndefinedBinaryOperatorResult",
  "description" : "      # clang-analyzer-core.UndefinedBinaryOperatorResult  The clang-analyzer-core.UndefinedBinaryOperatorResult check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.uninitialized.ArraySubscript",
  "title" : "Clang analyzer core uninitialized ArraySubscript",
  "description" : "      # clang-analyzer-core.uninitialized.ArraySubscript  The clang-analyzer-core.uninitialized.ArraySubscript check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.uninitialized.Assign",
  "title" : "Clang analyzer core uninitialized Assign",
  "description" : "      # clang-analyzer-core.uninitialized.Assign  The clang-analyzer-core.uninitialized.Assign check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.uninitialized.Branch",
  "title" : "Clang analyzer core uninitialized Branch",
  "description" : "      # clang-analyzer-core.uninitialized.Branch  The clang-analyzer-core.uninitialized.Branch check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.uninitialized.CapturedBlockVariable",
  "title" : "Clang analyzer core uninitialized CapturedBlockVariable",
  "description" : "  # clang-analyzer-core.uninitialized.CapturedBlockVariable  Check for blocks that capture uninitialized values",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.uninitialized.UndefReturn",
  "title" : "Clang analyzer core uninitialized UndefReturn",
  "description" : "      # clang-analyzer-core.uninitialized.UndefReturn  The clang-analyzer-core.uninitialized.UndefReturn check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.VLASize",
  "title" : "Clang analyzer core VLASize",
  "description" : "      # clang-analyzer-core.VLASize  The clang-analyzer-core.VLASize check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-cplusplus.InnerPointer",
  "title" : "Clang analyzer cplusplus InnerPointer",
  "description" : "  # clang-analyzer-cplusplus.InnerPointer  Check for inner pointers of C++ containers used after re/deallocation",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-cplusplus.Move",
  "title" : "Clang analyzer cplusplus Move",
  "description" : "      # clang-analyzer-cplusplus.Move  The clang-analyzer-cplusplus.Move check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-cplusplus.NewDelete",
  "title" : "Clang analyzer cplusplus NewDelete",
  "description" : "      # clang-analyzer-cplusplus.NewDelete  The clang-analyzer-cplusplus.NewDelete check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-cplusplus.NewDeleteLeaks",
  "title" : "Clang analyzer cplusplus NewDeleteLeaks",
  "description" : "      # clang-analyzer-cplusplus.NewDeleteLeaks  The clang-analyzer-cplusplus.NewDeleteLeaks check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-deadcode.DeadStores",
  "title" : "Clang analyzer deadcode DeadStores",
  "description" : "      # clang-analyzer-deadcode.DeadStores  The clang-analyzer-deadcode.DeadStores check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-nullability.NullableDereferenced",
  "title" : "Clang analyzer nullability NullableDereferenced",
  "description" : "      # clang-analyzer-nullability.NullableDereferenced  The clang-analyzer-nullability.NullableDereferenced check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-nullability.NullablePassedToNonnull",
  "title" : "Clang analyzer nullability NullablePassedToNonnull",
  "description" : "      # clang-analyzer-nullability.NullablePassedToNonnull  The clang-analyzer-nullability.NullablePassedToNonnull check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-nullability.NullableReturnedFromNonnull",
  "title" : "Clang analyzer nullability NullableReturnedFromNonnull",
  "description" : "  # clang-analyzer-nullability.NullableReturnedFromNonnull  Warns when a nullable pointer is returned from a function that has \\_Nonnull return type",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-nullability.NullPassedToNonnull",
  "title" : "Clang analyzer nullability NullPassedToNonnull",
  "description" : "      # clang-analyzer-nullability.NullPassedToNonnull  The clang-analyzer-nullability.NullPassedToNonnull check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-nullability.NullReturnedFromNonnull",
  "title" : "Clang analyzer nullability NullReturnedFromNonnull",
  "description" : "      # clang-analyzer-nullability.NullReturnedFromNonnull  The clang-analyzer-nullability.NullReturnedFromNonnull check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-optin.cplusplus.UninitializedObject",
  "title" : "Clang analyzer optin cplusplus UninitializedObject",
  "description" : "      # clang-analyzer-optin.cplusplus.UninitializedObject  The clang-analyzer-optin.cplusplus.UninitializedObject check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-optin.cplusplus.VirtualCall",
  "title" : "Clang analyzer optin cplusplus VirtualCall",
  "description" : "      # clang-analyzer-optin.cplusplus.VirtualCall  The clang-analyzer-optin.cplusplus.VirtualCall check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-optin.mpi.MPI-Checker",
  "title" : "Clang analyzer optin mpi MPI Checker",
  "description" : "      # clang-analyzer-optin.mpi.MPI-Checker  The clang-analyzer-optin.mpi.MPI-Checker check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker",
  "title" : "Clang analyzer optin osx cocoa localizability EmptyLocalizationContextChecker",
  "description" : "       # clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker  The clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker",
  "title" : "Clang analyzer optin osx cocoa localizability NonLocalizedStringChecker",
  "description" : "       # clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker  The clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-optin.osx.OSObjectCStyleCast",
  "title" : "Clang analyzer optin osx OSObjectCStyleCast",
  "description" : "  # clang-analyzer-optin.osx.OSObjectCStyleCast  Checker for C-style casts of OSObjects",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-optin.performance.GCDAntipattern",
  "title" : "Clang analyzer optin performance GCDAntipattern",
  "description" : "  # clang-analyzer-optin.performance.GCDAntipattern  Check for performance anti-patterns when using Grand Central Dispatch",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-optin.performance.Padding",
  "title" : "Clang analyzer optin performance Padding",
  "description" : "  # clang-analyzer-optin.performance.Padding  Check for excessively padded structs",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-optin.portability.UnixAPI",
  "title" : "Clang analyzer optin portability UnixAPI",
  "description" : "  # clang-analyzer-optin.portability.UnixAPI  Finds implementation-defined behavior in UNIX/Posix functions",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.API",
  "title" : "Clang analyzer osx API",
  "description" : "      # clang-analyzer-osx.API  The clang-analyzer-osx.API check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.AtSync",
  "title" : "Clang analyzer osx cocoa AtSync",
  "description" : "      # clang-analyzer-osx.cocoa.AtSync  The clang-analyzer-osx.cocoa.AtSync check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.AutoreleaseWrite",
  "title" : "Clang analyzer osx cocoa AutoreleaseWrite",
  "description" : "  # clang-analyzer-osx.cocoa.AutoreleaseWrite  Warn about potentially crashing writes to autoreleasing objects from different autoreleasing pools in Objective-C",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.ClassRelease",
  "title" : "Clang analyzer osx cocoa ClassRelease",
  "description" : "      # clang-analyzer-osx.cocoa.ClassRelease  The clang-analyzer-osx.cocoa.ClassRelease check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.Dealloc",
  "title" : "Clang analyzer osx cocoa Dealloc",
  "description" : "      # clang-analyzer-osx.cocoa.Dealloc  The clang-analyzer-osx.cocoa.Dealloc check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.IncompatibleMethodTypes",
  "title" : "Clang analyzer osx cocoa IncompatibleMethodTypes",
  "description" : "      # clang-analyzer-osx.cocoa.IncompatibleMethodTypes  The clang-analyzer-osx.cocoa.IncompatibleMethodTypes check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.Loops",
  "title" : "Clang analyzer osx cocoa Loops",
  "description" : "  # clang-analyzer-osx.cocoa.Loops  Improved modeling of loops using Cocoa collection types",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.MissingSuperCall",
  "title" : "Clang analyzer osx cocoa MissingSuperCall",
  "description" : "  # clang-analyzer-osx.cocoa.MissingSuperCall  Warn about Objective-C methods that lack a necessary call to super",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.NilArg",
  "title" : "Clang analyzer osx cocoa NilArg",
  "description" : "      # clang-analyzer-osx.cocoa.NilArg  The clang-analyzer-osx.cocoa.NilArg check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.NonNilReturnValue",
  "title" : "Clang analyzer osx cocoa NonNilReturnValue",
  "description" : "  # clang-analyzer-osx.cocoa.NonNilReturnValue  Model the APIs that are guaranteed to return a non-nil value",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.NSAutoreleasePool",
  "title" : "Clang analyzer osx cocoa NSAutoreleasePool",
  "description" : "      # clang-analyzer-osx.cocoa.NSAutoreleasePool  The clang-analyzer-osx.cocoa.NSAutoreleasePool check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.NSError",
  "title" : "Clang analyzer osx cocoa NSError",
  "description" : "      # clang-analyzer-osx.cocoa.NSError  The clang-analyzer-osx.cocoa.NSError check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.ObjCGenerics",
  "title" : "Clang analyzer osx cocoa ObjCGenerics",
  "description" : "      # clang-analyzer-osx.cocoa.ObjCGenerics  The clang-analyzer-osx.cocoa.ObjCGenerics check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.RetainCount",
  "title" : "Clang analyzer osx cocoa RetainCount",
  "description" : "      # clang-analyzer-osx.cocoa.RetainCount  The clang-analyzer-osx.cocoa.RetainCount check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak",
  "title" : "Clang analyzer osx cocoa RunLoopAutoreleaseLeak",
  "description" : "  # clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak  Check for leaked memory in autorelease pools that will never be drained",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.SelfInit",
  "title" : "Clang analyzer osx cocoa SelfInit",
  "description" : "      # clang-analyzer-osx.cocoa.SelfInit  The clang-analyzer-osx.cocoa.SelfInit check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.SuperDealloc",
  "title" : "Clang analyzer osx cocoa SuperDealloc",
  "description" : "      # clang-analyzer-osx.cocoa.SuperDealloc  The clang-analyzer-osx.cocoa.SuperDealloc check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.UnusedIvars",
  "title" : "Clang analyzer osx cocoa UnusedIvars",
  "description" : "      # clang-analyzer-osx.cocoa.UnusedIvars  The clang-analyzer-osx.cocoa.UnusedIvars check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.VariadicMethodTypes",
  "title" : "Clang analyzer osx cocoa VariadicMethodTypes",
  "description" : "      # clang-analyzer-osx.cocoa.VariadicMethodTypes  The clang-analyzer-osx.cocoa.VariadicMethodTypes check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.coreFoundation.CFError",
  "title" : "Clang analyzer osx coreFoundation CFError",
  "description" : "      # clang-analyzer-osx.coreFoundation.CFError  The clang-analyzer-osx.coreFoundation.CFError check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.coreFoundation.CFNumber",
  "title" : "Clang analyzer osx coreFoundation CFNumber",
  "description" : "      # clang-analyzer-osx.coreFoundation.CFNumber  The clang-analyzer-osx.coreFoundation.CFNumber check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.coreFoundation.CFRetainRelease",
  "title" : "Clang analyzer osx coreFoundation CFRetainRelease",
  "description" : "      # clang-analyzer-osx.coreFoundation.CFRetainRelease  The clang-analyzer-osx.coreFoundation.CFRetainRelease check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.coreFoundation.containers.OutOfBounds",
  "title" : "Clang analyzer osx coreFoundation containers OutOfBounds",
  "description" : "      # clang-analyzer-osx.coreFoundation.containers.OutOfBounds  The clang-analyzer-osx.coreFoundation.containers.OutOfBounds check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.coreFoundation.containers.PointerSizedValues",
  "title" : "Clang analyzer osx coreFoundation containers PointerSizedValues",
  "description" : "       # clang-analyzer-osx.coreFoundation.containers.PointerSizedValues  The clang-analyzer-osx.coreFoundation.containers.PointerSizedValues check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.MIG",
  "title" : "Clang analyzer osx MIG",
  "description" : "  # clang-analyzer-osx.MIG  Find violations of the Mach Interface Generator calling convention",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.NumberObjectConversion",
  "title" : "Clang analyzer osx NumberObjectConversion",
  "description" : "  # clang-analyzer-osx.NumberObjectConversion  Check for erroneous conversions of objects representing numbers into numbers",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.ObjCProperty",
  "title" : "Clang analyzer osx ObjCProperty",
  "description" : "  # clang-analyzer-osx.ObjCProperty  Check for proper uses of Objective-C properties",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.OSObjectRetainCount",
  "title" : "Clang analyzer osx OSObjectRetainCount",
  "description" : "  # clang-analyzer-osx.OSObjectRetainCount  Check for leaks and improper reference count management for OSObject",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.SecKeychainAPI",
  "title" : "Clang analyzer osx SecKeychainAPI",
  "description" : "      # clang-analyzer-osx.SecKeychainAPI  The clang-analyzer-osx.SecKeychainAPI check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.FloatLoopCounter",
  "title" : "Clang analyzer security FloatLoopCounter",
  "description" : "      # clang-analyzer-security.FloatLoopCounter  The clang-analyzer-security.FloatLoopCounter check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.bcmp",
  "title" : "Clang analyzer security insecureAPI bcmp",
  "description" : "      # clang-analyzer-security.insecureAPI.bcmp  The clang-analyzer-security.insecureAPI.bcmp check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.bcopy",
  "title" : "Clang analyzer security insecureAPI bcopy",
  "description" : "      # clang-analyzer-security.insecureAPI.bcopy  The clang-analyzer-security.insecureAPI.bcopy check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.bzero",
  "title" : "Clang analyzer security insecureAPI bzero",
  "description" : "      # clang-analyzer-security.insecureAPI.bzero  The clang-analyzer-security.insecureAPI.bzero check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
  "title" : "Clang analyzer security insecureAPI DeprecatedOrUnsafeBufferHandling",
  "description" : "       # clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling  The clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.getpw",
  "title" : "Clang analyzer security insecureAPI getpw",
  "description" : "      # clang-analyzer-security.insecureAPI.getpw  The clang-analyzer-security.insecureAPI.getpw check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.gets",
  "title" : "Clang analyzer security insecureAPI gets",
  "description" : "      # clang-analyzer-security.insecureAPI.gets  The clang-analyzer-security.insecureAPI.gets check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.mkstemp",
  "title" : "Clang analyzer security insecureAPI mkstemp",
  "description" : "      # clang-analyzer-security.insecureAPI.mkstemp  The clang-analyzer-security.insecureAPI.mkstemp check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.mktemp",
  "title" : "Clang analyzer security insecureAPI mktemp",
  "description" : "      # clang-analyzer-security.insecureAPI.mktemp  The clang-analyzer-security.insecureAPI.mktemp check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.rand",
  "title" : "Clang analyzer security insecureAPI rand",
  "description" : "      # clang-analyzer-security.insecureAPI.rand  The clang-analyzer-security.insecureAPI.rand check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.strcpy",
  "title" : "Clang analyzer security insecureAPI strcpy",
  "description" : "      # clang-analyzer-security.insecureAPI.strcpy  The clang-analyzer-security.insecureAPI.strcpy check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.UncheckedReturn",
  "title" : "Clang analyzer security insecureAPI UncheckedReturn",
  "description" : "      # clang-analyzer-security.insecureAPI.UncheckedReturn  The clang-analyzer-security.insecureAPI.UncheckedReturn check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.vfork",
  "title" : "Clang analyzer security insecureAPI vfork",
  "description" : "      # clang-analyzer-security.insecureAPI.vfork  The clang-analyzer-security.insecureAPI.vfork check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-unix.API",
  "title" : "Clang analyzer unix API",
  "description" : "      # clang-analyzer-unix.API  The clang-analyzer-unix.API check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-unix.cstring.BadSizeArg",
  "title" : "Clang analyzer unix cstring BadSizeArg",
  "description" : "      # clang-analyzer-unix.cstring.BadSizeArg  The clang-analyzer-unix.cstring.BadSizeArg check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-unix.cstring.NullArg",
  "title" : "Clang analyzer unix cstring NullArg",
  "description" : "      # clang-analyzer-unix.cstring.NullArg  The clang-analyzer-unix.cstring.NullArg check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-unix.Malloc",
  "title" : "Clang analyzer unix Malloc",
  "description" : "      # clang-analyzer-unix.Malloc  The clang-analyzer-unix.Malloc check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-unix.MallocSizeof",
  "title" : "Clang analyzer unix MallocSizeof",
  "description" : "      # clang-analyzer-unix.MallocSizeof  The clang-analyzer-unix.MallocSizeof check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-unix.MismatchedDeallocator",
  "title" : "Clang analyzer unix MismatchedDeallocator",
  "description" : "      # clang-analyzer-unix.MismatchedDeallocator  The clang-analyzer-unix.MismatchedDeallocator check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-unix.Vfork",
  "title" : "Clang analyzer unix Vfork",
  "description" : "      # clang-analyzer-unix.Vfork  The clang-analyzer-unix.Vfork check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-valist.CopyToSelf",
  "title" : "Clang analyzer valist CopyToSelf",
  "description" : "  # clang-analyzer-valist.CopyToSelf  Check for va_lists which are copied onto itself",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-valist.Uninitialized",
  "title" : "Clang analyzer valist Uninitialized",
  "description" : "  # clang-analyzer-valist.Uninitialized  Check for usages of uninitialized (or already released) va_lists",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-valist.Unterminated",
  "title" : "Clang analyzer valist Unterminated",
  "description" : "  # clang-analyzer-valist.Unterminated  Check for va_lists which are not released by a va_end call",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-avoid-c-arrays",
  "title" : "Avoid c arrays",
  "description" : "      # cppcoreguidelines-avoid-c-arrays  The cppcoreguidelines-avoid-c-arrays check is an alias, please see modernize-avoid-c-arrays for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-avoid-goto",
  "title" : "Avoid goto",
  "description" : "  # cppcoreguidelines-avoid-goto  The usage of `goto` for control flow is error prone and should be replaced with looping constructs",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-avoid-magic-numbers",
  "title" : "Avoid magic numbers",
  "description" : "      # cppcoreguidelines-avoid-magic-numbers  The cppcoreguidelines-avoid-magic-numbers check is an alias, please see readability-magic-numbers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-c-copy-assignment-signature",
  "title" : "C copy assignment signature",
  "description" : "      # cppcoreguidelines-c-copy-assignment-signature  The cppcoreguidelines-c-copy-assignment-signature check is an alias, please see misc-unconventional-assign-operator for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-explicit-virtual-functions",
  "title" : "Explicit virtual functions",
  "description" : "      # cppcoreguidelines-explicit-virtual-functions  The cppcoreguidelines-explicit-virtual-functions check is an alias, please see modernize-use-override for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-init-variables",
  "title" : "Init variables",
  "description" : "  # cppcoreguidelines-init-variables  Checks whether there are local variables that are declared without an initial value",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-interfaces-global-init",
  "title" : "Interfaces global init",
  "description" : "  # cppcoreguidelines-interfaces-global-init  This check flags initializers of globals that access extern objects, and therefore can lead to order-of-initialization problems",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-macro-usage",
  "title" : "Macro usage",
  "description" : "  # cppcoreguidelines-macro-usage  Finds macro usage that is considered problematic because better language constructs exist for the task",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-narrowing-conversions",
  "title" : "Narrowing conversions",
  "description" : "  # cppcoreguidelines-narrowing-conversions  Checks for silent narrowing conversions, e.g: `int i = 0; i += 0.1;`",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-no-malloc",
  "title" : "No malloc",
  "description" : "  # cppcoreguidelines-no-malloc  This check handles C-Style memory management using `malloc()`, `realloc()`, `calloc()` and `free()`",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-non-private-member-variables-in-classes",
  "title" : "Non private member variables in classes",
  "description" : "      # cppcoreguidelines-non-private-member-variables-in-classes  The cppcoreguidelines-non-private-member-variables-in-classes check is an alias, please see misc-non-private-member-variables-in-classes for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-owning-memory",
  "title" : "Owning memory",
  "description" : "  # cppcoreguidelines-owning-memory  This check implements the type-based semantics of `gsl::owner`, which allows static analysis on code, that uses raw pointers to handle resources like dynamic memory, but won't introduce RAII concepts",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-bounds-array-to-pointer-decay",
  "title" : "Pro bounds array to pointer decay",
  "description" : "  # cppcoreguidelines-pro-bounds-array-to-pointer-decay  This check flags all array to pointer decays",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-bounds-constant-array-index",
  "title" : "Pro bounds constant array index",
  "description" : "  # cppcoreguidelines-pro-bounds-constant-array-index  This check flags all array subscript expressions on static arrays and `std::arrays` that either do not have a constant integer expression index or are out of bounds (for `std::array`)",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-bounds-pointer-arithmetic",
  "title" : "Pro bounds pointer arithmetic",
  "description" : "  # cppcoreguidelines-pro-bounds-pointer-arithmetic  This check flags all usage of pointer arithmetic, because it could lead to an invalid pointer",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-type-const-cast",
  "title" : "Pro type const cast",
  "description" : "  # cppcoreguidelines-pro-type-const-cast  This check flags all uses of `const_cast` in C++ code",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-type-cstyle-cast",
  "title" : "Pro type cstyle cast",
  "description" : "  # cppcoreguidelines-pro-type-cstyle-cast  This check flags all use of C-style casts that perform a `static_cast` downcast, `const_cast`, or `reinterpret_cast`",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-type-member-init",
  "title" : "Pro type member init",
  "description" : "  # cppcoreguidelines-pro-type-member-init  The check flags user-defined constructor definitions that do not initialize all fields that would be left in an undefined state by default construction, e.g",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-type-reinterpret-cast",
  "title" : "Pro type reinterpret cast",
  "description" : "  # cppcoreguidelines-pro-type-reinterpret-cast  This check flags all uses of `reinterpret_cast` in C++ code",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-type-static-cast-downcast",
  "title" : "Pro type static cast downcast",
  "description" : "  # cppcoreguidelines-pro-type-static-cast-downcast  This check flags all usages of `static_cast`, where a base class is casted to a derived class",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-type-union-access",
  "title" : "Pro type union access",
  "description" : "  # cppcoreguidelines-pro-type-union-access  This check flags all access to members of unions",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-type-vararg",
  "title" : "Pro type vararg",
  "description" : "  # cppcoreguidelines-pro-type-vararg  This check flags all calls to c-style vararg functions and all use of `va_arg`",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-slicing",
  "title" : "Slicing",
  "description" : "  # cppcoreguidelines-slicing  Flags slicing of member variables or vtable",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-special-member-functions",
  "title" : "Special member functions",
  "description" : "  # cppcoreguidelines-special-member-functions  The check finds classes where some but not all of the special member functions are defined",
  "parameters" : [ ]
}, {
  "patternId" : "darwin-avoid-spinlock",
  "title" : "Darwin avoid spinlock",
  "description" : "  # darwin-avoid-spinlock  Finds usages of `OSSpinlock`, which is deprecated due to potential livelock problems",
  "parameters" : [ ]
}, {
  "patternId" : "darwin-dispatch-once-nonstatic",
  "title" : "Darwin dispatch once nonstatic",
  "description" : "  # darwin-dispatch-once-nonstatic  Finds declarations of `dispatch_once_t` variables without static or global storage",
  "parameters" : [ ]
}, {
  "patternId" : "fuchsia-default-arguments-calls",
  "title" : "Fuchsia default arguments calls",
  "description" : "  # fuchsia-default-arguments-calls  Warns if a function or method is called with default arguments",
  "parameters" : [ ]
}, {
  "patternId" : "fuchsia-default-arguments-declarations",
  "title" : "Fuchsia default arguments declarations",
  "description" : "  # fuchsia-default-arguments-declarations  Warns if a function or method is declared with default parameters",
  "parameters" : [ ]
}, {
  "patternId" : "fuchsia-header-anon-namespaces",
  "title" : "Fuchsia header anon namespaces",
  "description" : "      # fuchsia-header-anon-namespaces  The fuchsia-header-anon-namespaces check is an alias, please see google-build-namespace for more information",
  "parameters" : [ ]
}, {
  "patternId" : "fuchsia-multiple-inheritance",
  "title" : "Fuchsia multiple inheritance",
  "description" : "  # fuchsia-multiple-inheritance  Warns if a class inherits from multiple classes that are not pure virtual",
  "parameters" : [ ]
}, {
  "patternId" : "fuchsia-overloaded-operator",
  "title" : "Fuchsia overloaded operator",
  "description" : "  # fuchsia-overloaded-operator  Warns if an operator is overloaded, except for the assignment (copy and move) operators",
  "parameters" : [ ]
}, {
  "patternId" : "fuchsia-restrict-system-includes",
  "title" : "Fuchsia restrict system includes",
  "description" : "  # fuchsia-restrict-system-includes  Checks for allowed system includes and suggests removal of any others",
  "parameters" : [ ]
}, {
  "patternId" : "fuchsia-statically-constructed-objects",
  "title" : "Fuchsia statically constructed objects",
  "description" : "  # fuchsia-statically-constructed-objects  Warns if global, non-trivial objects with static storage are constructed, unless the object is statically initialized with a `constexpr` constructor or has no explicit constructor",
  "parameters" : [ ]
}, {
  "patternId" : "fuchsia-trailing-return",
  "title" : "Fuchsia trailing return",
  "description" : "  # fuchsia-trailing-return  Functions that have trailing returns are disallowed, except for those using `decltype` specifiers and lambda with otherwise unutterable return types",
  "parameters" : [ ]
}, {
  "patternId" : "fuchsia-virtual-inheritance",
  "title" : "Fuchsia virtual inheritance",
  "description" : "  # fuchsia-virtual-inheritance  Warns if classes are defined with virtual inheritance",
  "parameters" : [ ]
}, {
  "patternId" : "google-build-explicit-make-pair",
  "title" : "Google build explicit make pair",
  "description" : "  # google-build-explicit-make-pair  Check that `make_pair`'s template arguments are deduced",
  "parameters" : [ ]
}, {
  "patternId" : "google-build-namespaces",
  "title" : "Google build namespaces",
  "description" : "  # google-build-namespaces  cert-dcl59-cpp redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "google-build-using-namespace",
  "title" : "Google build using namespace",
  "description" : "  # google-build-using-namespace  Finds `using namespace` directives",
  "parameters" : [ ]
}, {
  "patternId" : "google-default-arguments",
  "title" : "Google default arguments",
  "description" : "  # google-default-arguments  Checks that default arguments are not given for virtual methods",
  "parameters" : [ ]
}, {
  "patternId" : "google-explicit-constructor",
  "title" : "Google explicit constructor",
  "description" : "  # google-explicit-constructor  Checks that constructors callable with a single argument and conversion operators are marked explicit to avoid the risk of unintentional implicit conversions",
  "parameters" : [ ]
}, {
  "patternId" : "google-global-names-in-headers",
  "title" : "Google global names in headers",
  "description" : "  # google-global-names-in-headers  Flag global namespace pollution in header files",
  "parameters" : [ ]
}, {
  "patternId" : "google-objc-avoid-nsobject-new",
  "title" : "Google objc avoid nsobject new",
  "description" : "  # google-objc-avoid-nsobject-new  Finds calls to `+new` or overrides of it, which are prohibited by the Google Objective-C style guide",
  "parameters" : [ ]
}, {
  "patternId" : "google-objc-avoid-throwing-exception",
  "title" : "Google objc avoid throwing exception",
  "description" : "  # google-objc-avoid-throwing-exception  Finds uses of throwing exceptions usages in Objective-C files",
  "parameters" : [ ]
}, {
  "patternId" : "google-objc-function-naming",
  "title" : "Google objc function naming",
  "description" : "  # google-objc-function-naming  Finds function declarations in Objective-C files that do not follow the pattern described in the Google Objective-C Style Guide",
  "parameters" : [ ]
}, {
  "patternId" : "google-objc-global-variable-declaration",
  "title" : "Google objc global variable declaration",
  "description" : "  # google-objc-global-variable-declaration  Finds global variable declarations in Objective-C files that do not follow the pattern of variable names in Google's Objective-C Style Guide",
  "parameters" : [ ]
}, {
  "patternId" : "google-readability-avoid-underscore-in-googletest-name",
  "title" : "Google readability avoid underscore in googletest name",
  "description" : "  # google-readability-avoid-underscore-in-googletest-name  Checks whether there are underscores in googletest test and test case names in test macros:  - `TEST` - `TEST_F` - `TEST_P` - `TYPED_TEST` - `TYPED_TEST_P`  The `FRIEND_TEST` macro is not included",
  "parameters" : [ ]
}, {
  "patternId" : "google-readability-braces-around-statements",
  "title" : "Google readability braces around statements",
  "description" : "      # google-readability-braces-around-statements  The google-readability-braces-around-statements check is an alias, please see readability-braces-around-statements for more information",
  "parameters" : [ ]
}, {
  "patternId" : "google-readability-casting",
  "title" : "Google readability casting",
  "description" : "  # google-readability-casting  Finds usages of C-style casts",
  "parameters" : [ ]
}, {
  "patternId" : "google-readability-function-size",
  "title" : "Google readability function size",
  "description" : "      # google-readability-function-size  The google-readability-function-size check is an alias, please see readability-function-size for more information",
  "parameters" : [ ]
}, {
  "patternId" : "google-readability-namespace-comments",
  "title" : "Google readability namespace comments",
  "description" : "      # google-readability-namespace-comments  The google-readability-namespace-comments check is an alias, please see llvm-namespace-comment for more information",
  "parameters" : [ ]
}, {
  "patternId" : "google-readability-todo",
  "title" : "Google readability todo",
  "description" : "  # google-readability-todo  Finds TODO comments without a username or bug number",
  "parameters" : [ ]
}, {
  "patternId" : "google-runtime-int",
  "title" : "Google runtime int",
  "description" : "  # google-runtime-int  Finds uses of `short`, `long` and `long long` and suggest replacing them with `u?intXX(_t)?`",
  "parameters" : [ ]
}, {
  "patternId" : "google-runtime-operator",
  "title" : "Google runtime operator",
  "description" : "  # google-runtime-operator  Finds overloads of unary `operator &`",
  "parameters" : [ ]
}, {
  "patternId" : "google-runtime-references",
  "title" : "Google runtime references",
  "description" : "  # google-runtime-references  Checks the usage of non-constant references in function parameters",
  "parameters" : [ ]
}, {
  "patternId" : "google-upgrade-googletest-case",
  "title" : "Google upgrade googletest case",
  "description" : "  # google-upgrade-googletest-case  Finds uses of deprecated Google Test version 1.9 APIs with names containing `case` and replaces them with equivalent APIs with `suite`",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-avoid-c-arrays",
  "title" : "Avoid c arrays",
  "description" : "      # hicpp-avoid-c-arrays  The hicpp-avoid-c-arrays check is an alias, please see modernize-avoid-c-arrays for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-avoid-goto",
  "title" : "Avoid goto",
  "description" : "  # hicpp-avoid-goto  The hicpp-avoid-goto check is an alias to cppcoreguidelines-avoid-goto",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-braces-around-statements",
  "title" : "Braces around statements",
  "description" : "      # hicpp-braces-around-statements  The hicpp-braces-around-statements check is an alias, please see readability-braces-around-statements for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-deprecated-headers",
  "title" : "Deprecated headers",
  "description" : "      # hicpp-deprecated-headers  The hicpp-deprecated-headers check is an alias, please see modernize-deprecated-headers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-exception-baseclass",
  "title" : "Exception baseclass",
  "description" : "  # hicpp-exception-baseclass  Ensure that every value that in a `throw` expression is an instance of `std::exception`",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-explicit-conversions",
  "title" : "Explicit conversions",
  "description" : "      # hicpp-explicit-conversions  This check is an alias for google-explicit-constructor",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-function-size",
  "title" : "Function size",
  "description" : "      # hicpp-function-size  This check is an alias for readability-function-size",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-invalid-access-moved",
  "title" : "Invalid access moved",
  "description" : "      # hicpp-invalid-access-moved  This check is an alias for bugprone-use-after-move",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-member-init",
  "title" : "Member init",
  "description" : "      # hicpp-member-init  This check is an alias for cppcoreguidelines-pro-type-member-init",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-move-const-arg",
  "title" : "Move const arg",
  "description" : "      # hicpp-move-const-arg  The hicpp-move-const-arg check is an alias, please see performance-move-const-arg for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-multiway-paths-covered",
  "title" : "Multiway paths covered",
  "description" : "  # hicpp-multiway-paths-covered  This check discovers situations where code paths are not fully-covered",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-named-parameter",
  "title" : "Named parameter",
  "description" : "      # hicpp-named-parameter  This check is an alias for readability-named-parameter",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-new-delete-operators",
  "title" : "New delete operators",
  "description" : "      # hicpp-new-delete-operators  This check is an alias for misc-new-delete-overloads",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-no-array-decay",
  "title" : "No array decay",
  "description" : "      # hicpp-no-array-decay  The hicpp-no-array-decay check is an alias, please see cppcoreguidelines-pro-bounds-array-to-pointer-decay for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-no-assembler",
  "title" : "No assembler",
  "description" : "  # hicpp-no-assembler  Check for assembler statements",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-no-malloc",
  "title" : "No malloc",
  "description" : "      # hicpp-no-malloc  The hicpp-no-malloc check is an alias, please see cppcoreguidelines-no-malloc for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-noexcept-move",
  "title" : "Noexcept move",
  "description" : "      # hicpp-noexcept-move  This check is an alias for misc-noexcept-moveconstructor",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-signed-bitwise",
  "title" : "Signed bitwise",
  "description" : "  # hicpp-signed-bitwise  Finds uses of bitwise operations on signed integer types, which may lead to undefined or implementation defined behaviour",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-special-member-functions",
  "title" : "Special member functions",
  "description" : "      # hicpp-special-member-functions  This check is an alias for cppcoreguidelines-special-member-functions",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-static-assert",
  "title" : "Static assert",
  "description" : "      # hicpp-static-assert  The hicpp-static-assert check is an alias, please see misc-static-assert for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-undelegated-constructor",
  "title" : "Undelegated constructor",
  "description" : "      # hicpp-undelegated-constructor  This check is an alias for bugprone-undelegated-constructor",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-uppercase-literal-suffix",
  "title" : "Uppercase literal suffix",
  "description" : "      # hicpp-uppercase-literal-suffix  The hicpp-uppercase-literal-suffix check is an alias, please see readability-uppercase-literal-suffix for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-use-auto",
  "title" : "Use auto",
  "description" : "      # hicpp-use-auto  The hicpp-use-auto check is an alias, please see modernize-use-auto for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-use-emplace",
  "title" : "Use emplace",
  "description" : "      # hicpp-use-emplace  The hicpp-use-emplace check is an alias, please see modernize-use-emplace for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-use-equals-default",
  "title" : "Use equals default",
  "description" : "      # hicpp-use-equals-default  This check is an alias for modernize-use-equals-default",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-use-equals-delete",
  "title" : "Use equals delete",
  "description" : "      # hicpp-use-equals-delete  This check is an alias for modernize-use-equals-delete",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-use-noexcept",
  "title" : "Use noexcept",
  "description" : "      # hicpp-use-noexcept  The hicpp-use-noexcept check is an alias, please see modernize-use-noexcept for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-use-nullptr",
  "title" : "Use nullptr",
  "description" : "      # hicpp-use-nullptr  The hicpp-use-nullptr check is an alias, please see modernize-use-nullptr for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-use-override",
  "title" : "Use override",
  "description" : "      # hicpp-use-override  This check is an alias for modernize-use-override",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-vararg",
  "title" : "Vararg",
  "description" : "      # hicpp-vararg  The hicpp-vararg check is an alias, please see cppcoreguidelines-pro-type-vararg for more information",
  "parameters" : [ ]
}, {
  "patternId" : "linuxkernel-must-use-errs",
  "title" : "Linuxkernel must use errs",
  "description" : "  # linuxkernel-must-use-errs  Checks Linux kernel code to see if it uses the results from the functions in `linux/err.h`",
  "parameters" : [ ]
}, {
  "patternId" : "llvm-header-guard",
  "title" : "Llvm header guard",
  "description" : "  # llvm-header-guard  Finds and fixes header guards that do not adhere to LLVM style",
  "parameters" : [ ]
}, {
  "patternId" : "llvm-include-order",
  "title" : "Llvm include order",
  "description" : "  # llvm-include-order  Checks the correct order of `#includes`",
  "parameters" : [ ]
}, {
  "patternId" : "llvm-namespace-comment",
  "title" : "Llvm namespace comment",
  "description" : "  # llvm-namespace-comment  google-readability-namespace-comments redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "llvm-prefer-isa-or-dyn-cast-in-conditionals",
  "title" : "Llvm prefer isa or dyn cast in conditionals",
  "description" : "  # llvm-prefer-isa-or-dyn-cast-in-conditionals  Looks at conditionals and finds and replaces cases of `cast`, which will assert rather than return a null pointer, and `dyn_cast` where the return value is not captured",
  "parameters" : [ ]
}, {
  "patternId" : "llvm-prefer-register-over-unsigned",
  "title" : "Llvm prefer register over unsigned",
  "description" : "  # llvm-prefer-register-over-unsigned  Finds historical use of `unsigned` to hold vregs and physregs and rewrites them to use `Register`",
  "parameters" : [ ]
}, {
  "patternId" : "llvm-qualified-auto",
  "title" : "Llvm qualified auto",
  "description" : "      # llvm-qualified-auto  The llvm-qualified-auto check is an alias, please see readability-qualified-auto for more information",
  "parameters" : [ ]
}, {
  "patternId" : "llvm-twine-local",
  "title" : "Llvm twine local",
  "description" : "  # llvm-twine-local  Looks for local `Twine` variables which are prone to use after frees and should be generally avoided",
  "parameters" : [ ]
}, {
  "patternId" : "misc-definitions-in-headers",
  "title" : "Definitions in headers",
  "description" : "  # misc-definitions-in-headers  Finds non-extern non-inline function and variable definitions in header files, which can lead to potential ODR violations in case these headers are included from multiple translation units",
  "parameters" : [ ]
}, {
  "patternId" : "misc-misplaced-const",
  "title" : "Misplaced const",
  "description" : "  # misc-misplaced-const  This check diagnoses when a `const` qualifier is applied to a `typedef` to a pointer type rather than to the pointee, because such constructs are often misleading to developers because the `const` applies to the pointer rather than the pointee",
  "parameters" : [ ]
}, {
  "patternId" : "misc-new-delete-overloads",
  "title" : "New delete overloads",
  "description" : "  # misc-new-delete-overloads  cert-dcl54-cpp redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "misc-non-copyable-objects",
  "title" : "Non copyable objects",
  "description" : "  # misc-non-copyable-objects  cert-fio38-c redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "misc-non-private-member-variables-in-classes",
  "title" : "Non private member variables in classes",
  "description" : "  # misc-non-private-member-variables-in-classes  cppcoreguidelines-non-private-member-variables-in-classes redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "misc-redundant-expression",
  "title" : "Redundant expression",
  "description" : "  # misc-redundant-expression  Detect redundant expressions which are typically errors due to copy-paste",
  "parameters" : [ ]
}, {
  "patternId" : "misc-static-assert",
  "title" : "Static assert",
  "description" : "  # misc-static-assert  cert-dcl03-c redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "misc-throw-by-value-catch-by-reference",
  "title" : "Throw by value catch by reference",
  "description" : "  # misc-throw-by-value-catch-by-reference  cert-err09-cpp redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "misc-unconventional-assign-operator",
  "title" : "Unconventional assign operator",
  "description" : "  # misc-unconventional-assign-operator  Finds declarations of assign operators with the wrong return and/or argument types and definitions with good return type but wrong `return` statements",
  "parameters" : [ ]
}, {
  "patternId" : "misc-uniqueptr-reset-release",
  "title" : "Uniqueptr reset release",
  "description" : "  # misc-uniqueptr-reset-release  Find and replace `unique_ptr::reset(release())` with `std::move()`",
  "parameters" : [ ]
}, {
  "patternId" : "misc-unused-alias-decls",
  "title" : "Unused alias decls",
  "description" : "  # misc-unused-alias-decls  Finds unused namespace alias declarations",
  "parameters" : [ ]
}, {
  "patternId" : "misc-unused-parameters",
  "title" : "Unused parameters",
  "description" : "  # misc-unused-parameters  Finds unused function parameters",
  "parameters" : [ ]
}, {
  "patternId" : "misc-unused-using-decls",
  "title" : "Unused using decls",
  "description" : "  # misc-unused-using-decls  Finds unused `using` declarations",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-avoid-bind",
  "title" : "Avoid bind",
  "description" : "  # modernize-avoid-bind  The check finds uses of `std::bind` and `boost::bind` and replaces them with lambdas",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-avoid-c-arrays",
  "title" : "Avoid c arrays",
  "description" : "  # modernize-avoid-c-arrays  cppcoreguidelines-avoid-c-arrays redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-concat-nested-namespaces",
  "title" : "Concat nested namespaces",
  "description" : "  # modernize-concat-nested-namespaces  Checks for use of nested namespaces such as `namespace a { namespace b { .",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-deprecated-headers",
  "title" : "Deprecated headers",
  "description" : "  # modernize-deprecated-headers  Some headers from C library were deprecated in C++ and are no longer welcome in C++ codebases",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-deprecated-ios-base-aliases",
  "title" : "Deprecated ios base aliases",
  "description" : "  # modernize-deprecated-ios-base-aliases  Detects usage of the deprecated member types of `std::ios_base` and replaces those that have a non-deprecated equivalent",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-loop-convert",
  "title" : "Loop convert",
  "description" : "  # modernize-loop-convert  This check converts `for(...; ...; ...)` loops to use the new range-based loops in C++11",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-make-shared",
  "title" : "Make shared",
  "description" : "  # modernize-make-shared  This check finds the creation of `std::shared_ptr` objects by explicitly calling the constructor and a `new` expression, and replaces it with a call to `std::make_shared`",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-make-unique",
  "title" : "Make unique",
  "description" : "  # modernize-make-unique  This check finds the creation of `std::unique_ptr` objects by explicitly calling the constructor and a `new` expression, and replaces it with a call to `std::make_unique`, introduced in C++14",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-pass-by-value",
  "title" : "Pass by value",
  "description" : "  # modernize-pass-by-value  With move semantics added to the language and the standard library updated with move constructors added for many types it is now interesting to take an argument directly by value, instead of by const-reference, and then copy",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-raw-string-literal",
  "title" : "Raw string literal",
  "description" : "  # modernize-raw-string-literal  This check selectively replaces string literals containing escaped characters with raw string literals",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-redundant-void-arg",
  "title" : "Redundant void arg",
  "description" : "  # modernize-redundant-void-arg  Find and remove redundant `void` argument lists",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-replace-auto-ptr",
  "title" : "Replace auto ptr",
  "description" : "  # modernize-replace-auto-ptr  This check replaces the uses of the deprecated class `std::auto_ptr` by `std::unique_ptr` (introduced in C++11)",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-replace-random-shuffle",
  "title" : "Replace random shuffle",
  "description" : "  # modernize-replace-random-shuffle  This check will find occurrences of `std::random_shuffle` and replace it with `std::shuffle`",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-return-braced-init-list",
  "title" : "Return braced init list",
  "description" : "  # modernize-return-braced-init-list  Replaces explicit calls to the constructor in a return with a braced initializer list",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-shrink-to-fit",
  "title" : "Shrink to fit",
  "description" : "  # modernize-shrink-to-fit  Replace copy and swap tricks on shrinkable containers with the `shrink_to_fit()` method call",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-unary-static-assert",
  "title" : "Unary static assert",
  "description" : "  # modernize-unary-static-assert  The check diagnoses any `static_assert` declaration with an empty string literal and provides a fix-it to replace the declaration with a single-argument `static_assert` declaration",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-auto",
  "title" : "Use auto",
  "description" : "  # modernize-use-auto  This check is responsible for using the `auto` type specifier for variable declarations to *improve code readability and maintainability*",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-bool-literals",
  "title" : "Use bool literals",
  "description" : "  # modernize-use-bool-literals  Finds integer literals which are cast to `bool`",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-default-member-init",
  "title" : "Use default member init",
  "description" : "  # modernize-use-default-member-init  This check converts a default constructor's member initializers into the new default member initializers in C++11",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-default",
  "title" : "Use default",
  "description" : "clang-tidy - modernize-use-default        # modernize-use-default  This check has been renamed to modernize-use-equals-default",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-emplace",
  "title" : "Use emplace",
  "description" : "  # modernize-use-emplace  The check flags insertions to an STL-style container done by calling the `push_back` method with an explicitly-constructed temporary of the container element type",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-equals-default",
  "title" : "Use equals default",
  "description" : "  # modernize-use-equals-default  This check replaces default bodies of special member functions with `= default;`",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-equals-delete",
  "title" : "Use equals delete",
  "description" : "  # modernize-use-equals-delete  This check marks unimplemented private special member functions with `= delete`",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-nodiscard",
  "title" : "Use nodiscard",
  "description" : "  # modernize-use-nodiscard  Adds `[[nodiscard]]` attributes (introduced in C++17) to member functions in order to highlight at compile time which return values should not be ignored",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-noexcept",
  "title" : "Use noexcept",
  "description" : "  # modernize-use-noexcept  This check replaces deprecated dynamic exception specifications with the appropriate noexcept specification (introduced in C++11)",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-nullptr",
  "title" : "Use nullptr",
  "description" : "  # modernize-use-nullptr  The check converts the usage of null pointer constants (eg",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-override",
  "title" : "Use override",
  "description" : "  # modernize-use-override  Adds `override` (introduced in C++11) to overridden virtual functions and removes `virtual` from those functions as it is not required",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-trailing-return-type",
  "title" : "Use trailing return type",
  "description" : "  # modernize-use-trailing-return-type  Rewrites function signatures to use a trailing return type (introduced in C++11)",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-transparent-functors",
  "title" : "Use transparent functors",
  "description" : "  # modernize-use-transparent-functors  Prefer transparent functors to non-transparent ones",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-uncaught-exceptions",
  "title" : "Use uncaught exceptions",
  "description" : "  # modernize-use-uncaught-exceptions  This check will warn on calls to `std::uncaught_exception` and replace them with calls to `std::uncaught_exceptions`, since `std::uncaught_exception` was deprecated in C++17",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-using",
  "title" : "Use using",
  "description" : "  # modernize-use-using  The check converts the usage of `typedef` with `using` keyword",
  "parameters" : [ ]
}, {
  "patternId" : "mpi-buffer-deref",
  "title" : "Mpi buffer deref",
  "description" : "  # mpi-buffer-deref  This check verifies if a buffer passed to an MPI (Message Passing Interface) function is sufficiently dereferenced",
  "parameters" : [ ]
}, {
  "patternId" : "mpi-type-mismatch",
  "title" : "Mpi type mismatch",
  "description" : "  # mpi-type-mismatch  This check verifies if buffer type and MPI (Message Passing Interface) datatype pairs match for used MPI functions",
  "parameters" : [ ]
}, {
  "patternId" : "objc-avoid-nserror-init",
  "title" : "Avoid nserror init",
  "description" : "  # objc-avoid-nserror-init  Finds improper initialization of `NSError` objects",
  "parameters" : [ ]
}, {
  "patternId" : "objc-forbidden-subclassing",
  "title" : "Forbidden subclassing",
  "description" : "  # objc-forbidden-subclassing  Finds Objective-C classes which are subclasses of classes which are not designed to be subclassed",
  "parameters" : [ ]
}, {
  "patternId" : "objc-missing-hash",
  "title" : "Missing hash",
  "description" : "  # objc-missing-hash  Finds Objective-C implementations that implement `-isEqual:` without also appropriately implementing `-hash`",
  "parameters" : [ ]
}, {
  "patternId" : "objc-property-declaration",
  "title" : "Property declaration",
  "description" : "  # objc-property-declaration  Finds property declarations in Objective-C files that do not follow the pattern of property names in Apple's programming guide",
  "parameters" : [ ]
}, {
  "patternId" : "objc-super-self",
  "title" : "Super self",
  "description" : "  # objc-super-self  Finds invocations of `-self` on super instances in initializers of subclasses of `NSObject` and recommends calling a superclass initializer instead",
  "parameters" : [ ]
}, {
  "patternId" : "openmp-exception-escape",
  "title" : "Openmp exception escape",
  "description" : "  # openmp-exception-escape  Analyzes OpenMP Structured Blocks and checks that no exception escapes out of the Structured Block it was thrown in",
  "parameters" : [ ]
}, {
  "patternId" : "openmp-use-default-none",
  "title" : "Openmp use default none",
  "description" : "  # openmp-use-default-none  Finds OpenMP directives that are allowed to contain a `default` clause, but either don't specify it or the clause is specified but with the kind other than `none`, and suggests to use the `default(none)` clause",
  "parameters" : [ ]
}, {
  "patternId" : "performance-faster-string-find",
  "title" : "Faster string find",
  "description" : "  # performance-faster-string-find  Optimize calls to `std::string::find()` and friends when the needle passed is a single character string literal",
  "parameters" : [ ]
}, {
  "patternId" : "performance-for-range-copy",
  "title" : "For range copy",
  "description" : "  # performance-for-range-copy  Finds C++11 for ranges where the loop variable is copied in each iteration but it would suffice to obtain it by const reference",
  "parameters" : [ ]
}, {
  "patternId" : "performance-implicit-cast-in-loop",
  "title" : "Implicit cast in loop",
  "description" : "clang-tidy - performance-implicit-cast-in-loop        # performance-implicit-cast-in-loop  This check has been renamed to performance-implicit-conversion-in-loop",
  "parameters" : [ ]
}, {
  "patternId" : "performance-implicit-conversion-in-loop",
  "title" : "Implicit conversion in loop",
  "description" : "  # performance-implicit-conversion-in-loop  This warning appears in a range-based loop with a loop variable of const ref type where the type of the variable does not match the one returned by the iterator",
  "parameters" : [ ]
}, {
  "patternId" : "performance-inefficient-algorithm",
  "title" : "Inefficient algorithm",
  "description" : "  # performance-inefficient-algorithm  Warns on inefficient use of STL algorithms on associative containers",
  "parameters" : [ ]
}, {
  "patternId" : "performance-inefficient-string-concatenation",
  "title" : "Inefficient string concatenation",
  "description" : "  # performance-inefficient-string-concatenation  This check warns about the performance overhead arising from concatenating strings using the `operator+`, for instance:  ``` c++ std::string a(\"Foo\"), b(\"Bar\"); a = a + b; ```  Instead of this structure you should use `operator+=` or `std::string`'s (`std::basic_string`) class member function `append()`",
  "parameters" : [ ]
}, {
  "patternId" : "performance-inefficient-vector-operation",
  "title" : "Inefficient vector operation",
  "description" : "  # performance-inefficient-vector-operation  Finds possible inefficient `std::vector` operations (e.g",
  "parameters" : [ ]
}, {
  "patternId" : "performance-move-const-arg",
  "title" : "Move const arg",
  "description" : "  # performance-move-const-arg  The check warns  - if `std::move()` is called with a constant argument, - if `std::move()` is called with an argument of a trivially-copyable   type, - if the result of `std::move()` is passed as a const reference   argument",
  "parameters" : [ ]
}, {
  "patternId" : "performance-move-constructor-init",
  "title" : "Move constructor init",
  "description" : "  # performance-move-constructor-init  \"cert-oop11-cpp\" redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "performance-no-automatic-move",
  "title" : "No automatic move",
  "description" : "  # performance-no-automatic-move  Finds local variables that cannot be automatically moved due to constness",
  "parameters" : [ ]
}, {
  "patternId" : "performance-noexcept-move-constructor",
  "title" : "Noexcept move constructor",
  "description" : "  # performance-noexcept-move-constructor  The check flags user-defined move constructors and assignment operators not marked with `noexcept` or marked with `noexcept(expr)` where `expr` evaluates to `false` (but is not a `false` literal itself)",
  "parameters" : [ ]
}, {
  "patternId" : "performance-trivially-destructible",
  "title" : "Trivially destructible",
  "description" : "  # performance-trivially-destructible  Finds types that could be made trivially-destructible by removing out-of-line defaulted destructor declarations",
  "parameters" : [ ]
}, {
  "patternId" : "performance-type-promotion-in-math-fn",
  "title" : "Type promotion in math fn",
  "description" : "  # performance-type-promotion-in-math-fn  Finds calls to C math library functions (from `math.h` or, in C++, `cmath`) with implicit `float` to `double` promotions",
  "parameters" : [ ]
}, {
  "patternId" : "performance-unnecessary-copy-initialization",
  "title" : "Unnecessary copy initialization",
  "description" : "  # performance-unnecessary-copy-initialization  Finds local variable declarations that are initialized using the copy constructor of a non-trivially-copyable type but it would suffice to obtain a const reference",
  "parameters" : [ ]
}, {
  "patternId" : "performance-unnecessary-value-param",
  "title" : "Unnecessary value param",
  "description" : "  # performance-unnecessary-value-param  Flags value parameter declarations of expensive to copy types that are copied for each invocation but it would suffice to pass them by const reference",
  "parameters" : [ ]
}, {
  "patternId" : "portability-simd-intrinsics",
  "title" : "Simd intrinsics",
  "description" : "  # portability-simd-intrinsics  Finds SIMD intrinsics calls and suggests `std::experimental::simd` (P0214 alternatives",
  "parameters" : [ ]
}, {
  "patternId" : "readability-avoid-const-params-in-decls",
  "title" : "Avoid const params in decls",
  "description" : "  # readability-avoid-const-params-in-decls  Checks whether a function declaration has parameters that are top level `const`",
  "parameters" : [ ]
}, {
  "patternId" : "readability-braces-around-statements",
  "title" : "Braces around statements",
  "description" : "  # readability-braces-around-statements  google-readability-braces-around-statements redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "readability-const-return-type",
  "title" : "Const return type",
  "description" : "  # readability-const-return-type  Checks for functions with a `const`-qualified return type and recommends removal of the `const` keyword",
  "parameters" : [ ]
}, {
  "patternId" : "readability-container-size-empty",
  "title" : "Container size empty",
  "description" : "  # readability-container-size-empty  Checks whether a call to the `size()` method can be replaced with a call to `empty()`",
  "parameters" : [ ]
}, {
  "patternId" : "readability-convert-member-functions-to-static",
  "title" : "Convert member functions to static",
  "description" : "  # readability-convert-member-functions-to-static  Finds non-static member functions that can be made `static` because the functions don't use `this`",
  "parameters" : [ ]
}, {
  "patternId" : "readability-delete-null-pointer",
  "title" : "Delete null pointer",
  "description" : "  # readability-delete-null-pointer  Checks the `if` statements where a pointer's existence is checked and then deletes the pointer",
  "parameters" : [ ]
}, {
  "patternId" : "readability-deleted-default",
  "title" : "Deleted default",
  "description" : "  # readability-deleted-default  Checks that constructors and assignment operators marked as `= default` are not actually deleted by the compiler",
  "parameters" : [ ]
}, {
  "patternId" : "readability-else-after-return",
  "title" : "Else after return",
  "description" : "  # readability-else-after-return  LLVM Coding Standards advises to reduce indentation where possible and where it makes understanding code easier",
  "parameters" : [ ]
}, {
  "patternId" : "readability-function-size",
  "title" : "Function size",
  "description" : "  # readability-function-size  google-readability-function-size redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "readability-identifier-naming",
  "title" : "Identifier naming",
  "description" : "  # readability-identifier-naming  Checks for identifiers naming style mismatch",
  "parameters" : [ ]
}, {
  "patternId" : "readability-implicit-bool-cast",
  "title" : "Implicit bool cast",
  "description" : "clang-tidy - readability-implicit-bool-cast        # readability-implicit-bool-cast  This check has been renamed to readability-implicit-bool-conversion",
  "parameters" : [ ]
}, {
  "patternId" : "readability-implicit-bool-conversion",
  "title" : "Implicit bool conversion",
  "description" : "  # readability-implicit-bool-conversion  This check can be used to find implicit conversions between built-in types and booleans",
  "parameters" : [ ]
}, {
  "patternId" : "readability-inconsistent-declaration-parameter-name",
  "title" : "Inconsistent declaration parameter name",
  "description" : "  # readability-inconsistent-declaration-parameter-name  Find function declarations which differ in parameter names",
  "parameters" : [ ]
}, {
  "patternId" : "readability-isolate-declaration",
  "title" : "Isolate declaration",
  "description" : "  # readability-isolate-declaration  Detects local variable declarations declaring more than one variable and tries to refactor the code to one statement per declaration",
  "parameters" : [ ]
}, {
  "patternId" : "readability-magic-numbers",
  "title" : "Magic numbers",
  "description" : "  # readability-magic-numbers  Detects magic numbers, integer or floating point literals that are embedded in code and not introduced via constants or symbols",
  "parameters" : [ ]
}, {
  "patternId" : "readability-make-member-function-const",
  "title" : "Make member function const",
  "description" : "  # readability-make-member-function-const  Finds non-static member functions that can be made `const` because the functions don't use `this` in a non-const way",
  "parameters" : [ ]
}, {
  "patternId" : "readability-misleading-indentation",
  "title" : "Misleading indentation",
  "description" : "  # readability-misleading-indentation  Correct indentation helps to understand code",
  "parameters" : [ ]
}, {
  "patternId" : "readability-misplaced-array-index",
  "title" : "Misplaced array index",
  "description" : "  # readability-misplaced-array-index  This check warns for unusual array index syntax",
  "parameters" : [ ]
}, {
  "patternId" : "readability-named-parameter",
  "title" : "Named parameter",
  "description" : "  # readability-named-parameter  Find functions with unnamed arguments",
  "parameters" : [ ]
}, {
  "patternId" : "readability-non-const-parameter",
  "title" : "Non const parameter",
  "description" : "  # readability-non-const-parameter  The check finds function parameters of a pointer type that could be changed to point to a constant type instead",
  "parameters" : [ ]
}, {
  "patternId" : "readability-qualified-auto",
  "title" : "Qualified auto",
  "description" : "  # readability-qualified-auto  Adds pointer and `const` qualifications to `auto`-typed variables that are deduced to pointers and `const` pointers",
  "parameters" : [ ]
}, {
  "patternId" : "readability-redundant-access-specifiers",
  "title" : "Redundant access specifiers",
  "description" : "  # readability-redundant-access-specifiers  Finds classes, structs, and unions containing redundant member (field and method) access specifiers",
  "parameters" : [ ]
}, {
  "patternId" : "readability-redundant-control-flow",
  "title" : "Redundant control flow",
  "description" : "  # readability-redundant-control-flow  This check looks for procedures (functions returning no value) with `return` statements at the end of the function",
  "parameters" : [ ]
}, {
  "patternId" : "readability-redundant-declaration",
  "title" : "Redundant declaration",
  "description" : "  # readability-redundant-declaration  Finds redundant variable and function declarations",
  "parameters" : [ ]
}, {
  "patternId" : "readability-redundant-function-ptr-dereference",
  "title" : "Redundant function ptr dereference",
  "description" : "  # readability-redundant-function-ptr-dereference  Finds redundant dereferences of a function pointer",
  "parameters" : [ ]
}, {
  "patternId" : "readability-redundant-member-init",
  "title" : "Redundant member init",
  "description" : "  # readability-redundant-member-init  Finds member initializations that are unnecessary because the same default constructor would be called if they were not present",
  "parameters" : [ ]
}, {
  "patternId" : "readability-redundant-preprocessor",
  "title" : "Redundant preprocessor",
  "description" : "  # readability-redundant-preprocessor  Finds potentially redundant preprocessor directives",
  "parameters" : [ ]
}, {
  "patternId" : "readability-redundant-smartptr-get",
  "title" : "Redundant smartptr get",
  "description" : "  # readability-redundant-smartptr-get  Find and remove redundant calls to smart pointer's `.get()` method",
  "parameters" : [ ]
}, {
  "patternId" : "readability-redundant-string-cstr",
  "title" : "Redundant string cstr",
  "description" : "  # readability-redundant-string-cstr  Finds unnecessary calls to `std::string::c_str()` and `std::string::data()`",
  "parameters" : [ ]
}, {
  "patternId" : "readability-redundant-string-init",
  "title" : "Redundant string init",
  "description" : "  # readability-redundant-string-init  Finds unnecessary string initializations",
  "parameters" : [ ]
}, {
  "patternId" : "readability-simplify-boolean-expr",
  "title" : "Simplify boolean expr",
  "description" : "  # readability-simplify-boolean-expr  Looks for boolean expressions involving boolean constants and simplifies them to use the appropriate boolean expression directly",
  "parameters" : [ ]
}, {
  "patternId" : "readability-simplify-subscript-expr",
  "title" : "Simplify subscript expr",
  "description" : "  # readability-simplify-subscript-expr  This check simplifies subscript expressions",
  "parameters" : [ ]
}, {
  "patternId" : "readability-static-accessed-through-instance",
  "title" : "Static accessed through instance",
  "description" : "  # readability-static-accessed-through-instance  Checks for member expressions that access static members through instances, and replaces them with uses of the appropriate qualified-id",
  "parameters" : [ ]
}, {
  "patternId" : "readability-static-definition-in-anonymous-namespace",
  "title" : "Static definition in anonymous namespace",
  "description" : "  # readability-static-definition-in-anonymous-namespace  Finds static function and variable definitions in anonymous namespace",
  "parameters" : [ ]
}, {
  "patternId" : "readability-string-compare",
  "title" : "String compare",
  "description" : "  # readability-string-compare  Finds string comparisons using the compare method",
  "parameters" : [ ]
}, {
  "patternId" : "readability-uniqueptr-delete-release",
  "title" : "Uniqueptr delete release",
  "description" : "  # readability-uniqueptr-delete-release  Replace `delete .release()` with ` = nullptr`",
  "parameters" : [ ]
}, {
  "patternId" : "readability-uppercase-literal-suffix",
  "title" : "Uppercase literal suffix",
  "description" : "  # readability-uppercase-literal-suffix  cert-dcl16-c redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "zircon-temporary-objects",
  "title" : "Temporary objects",
  "description" : "  # zircon-temporary-objects  Warns on construction of specific temporary objects in the Zircon kernel",
  "parameters" : [ ]
} ]
