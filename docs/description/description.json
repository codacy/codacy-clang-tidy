[ {
  "patternId" : "clang-analyzer-core.uninitialized.UndefReturn",
  "title" : "Clang analyzer core uninitialized UndefReturn",
  "description" : " The clang-analyzer-core.uninitialized.UndefReturn check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-argument-comment",
  "title" : "Argument comment",
  "description" : " Checks that argument comments match parameter names",
  "parameters" : [ ]
}, {
  "patternId" : "readability-simplify-subscript-expr",
  "title" : "Simplify subscript expr",
  "description" : " This check simplifies subscript expressions",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-deadcode.DeadStores",
  "title" : "Clang analyzer deadcode DeadStores",
  "description" : " The clang-analyzer-deadcode.DeadStores check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.NumberObjectConversion",
  "title" : "Clang analyzer osx NumberObjectConversion",
  "description" : " Check for erroneous conversions of objects representing numbers into numbers",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-type-cstyle-cast",
  "title" : "Pro type cstyle cast",
  "description" : " This check flags all use of C-style casts that perform a `static_cast` downcast, `const_cast`, or `reinterpret_cast`",
  "parameters" : [ ]
}, {
  "patternId" : "misc-throw-by-value-catch-by-reference",
  "title" : "Throw by value catch by reference",
  "description" : " cert-err09-cpp redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-swapped-arguments",
  "title" : "Swapped arguments",
  "description" : " Finds potentially swapped arguments by looking at implicit conversions",
  "parameters" : [ ]
}, {
  "patternId" : "readability-redundant-member-init",
  "title" : "Redundant member init",
  "description" : " Finds member initializations that are unnecessary because the same default constructor would be called if they were not present",
  "parameters" : [ ]
}, {
  "patternId" : "misc-unconventional-assign-operator",
  "title" : "Unconventional assign operator",
  "description" : " Finds declarations of assign operators with the wrong return and/or argument types and definitions with good return type but wrong `return` statements",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-signed-char-misuse",
  "title" : "Signed char misuse",
  "description" : " Finds `signed char` -&gt; integer conversions which might indicate a programming error",
  "parameters" : [ ]
}, {
  "patternId" : "misc-non-private-member-variables-in-classes",
  "title" : "Non private member variables in classes",
  "description" : " cppcoreguidelines-non-private-member-variables-in-classes redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "readability-identifier-naming",
  "title" : "Identifier naming",
  "description" : " Checks for identifiers naming style mismatch",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-use-equals-default",
  "title" : "Use equals default",
  "description" : " This check is an alias for modernize-use-equals-default",
  "parameters" : [ ]
}, {
  "patternId" : "google-objc-avoid-nsobject-new",
  "title" : "Google objc avoid nsobject new",
  "description" : " Finds calls to `+new` or overrides of it, which are prohibited by the Google Objective-C style guide",
  "parameters" : [ ]
}, {
  "patternId" : "readability-named-parameter",
  "title" : "Named parameter",
  "description" : " Find functions with unnamed arguments",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-integer-division",
  "title" : "Integer division",
  "description" : " Finds cases where integer division in a floating point context is likely to cause unintended loss of precision",
  "parameters" : [ ]
}, {
  "patternId" : "cert-msc50-cpp",
  "title" : "Cert msc50 cpp",
  "description" : " Pseudorandom number generators use mathematical algorithms to produce a sequence of numbers with good statistical properties, but the numbers produced are not genuinely random",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-replace-auto-ptr",
  "title" : "Replace auto ptr",
  "description" : " This check replaces the uses of the deprecated class `std::auto_ptr` by `std::unique_ptr` (introduced in C++11)",
  "parameters" : [ ]
}, {
  "patternId" : "readability-uniqueptr-delete-release",
  "title" : "Uniqueptr delete release",
  "description" : " Replace `delete .release()` with ` = nullptr`",
  "parameters" : [ ]
}, {
  "patternId" : "readability-redundant-access-specifiers",
  "title" : "Redundant access specifiers",
  "description" : " Finds classes, structs, and unions containing redundant member (field and method) access specifiers",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-incorrect-roundings",
  "title" : "Incorrect roundings",
  "description" : " Checks the usage of patterns known to produce incorrect rounding",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-pipe2",
  "title" : "Android cloexec pipe2",
  "description" : " This checks ensures that pipe2() is called with the O\\_CLOEXEC flag",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-time-subtraction",
  "title" : "Abseil time subtraction",
  "description" : " Finds and fixes `absl::Time` subtraction expressions to do subtraction in the Time domain instead of the numeric domain",
  "parameters" : [ ]
}, {
  "patternId" : "readability-static-accessed-through-instance",
  "title" : "Static accessed through instance",
  "description" : " Checks for member expressions that access static members through instances, and replaces them with uses of the appropriate qualified-id",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-avoid-c-arrays",
  "title" : "Avoid c arrays",
  "description" : " cppcoreguidelines-avoid-c-arrays redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-sizeof-container",
  "title" : "Sizeof container",
  "description" : " The check finds usages of `sizeof` on expressions of STL container types",
  "parameters" : [ ]
}, {
  "patternId" : "llvm-prefer-register-over-unsigned",
  "title" : "Llvm prefer register over unsigned",
  "description" : " Finds historical use of `unsigned` to hold vregs and physregs and rewrites them to use `Register`",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-type-static-cast-downcast",
  "title" : "Pro type static cast downcast",
  "description" : " This check flags all usages of `static_cast`, where a base class is casted to a derived class",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-nullability.NullReturnedFromNonnull",
  "title" : "Clang analyzer nullability NullReturnedFromNonnull",
  "description" : " The clang-analyzer-nullability.NullReturnedFromNonnull check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-owning-memory",
  "title" : "Owning memory",
  "description" : " This check implements the type-based semantics of `gsl::owner`, which allows static analysis on code, that uses raw pointers to handle resources like dynamic memory, but won't introduce RAII concepts",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.NonNilReturnValue",
  "title" : "Clang analyzer osx cocoa NonNilReturnValue",
  "description" : " Model the APIs that are guaranteed to return a non-nil value",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-member-init",
  "title" : "Member init",
  "description" : " This check is an alias for cppcoreguidelines-pro-type-member-init",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-accept4",
  "title" : "Android cloexec accept4",
  "description" : " `accept4()` should include `SOCK_CLOEXEC` in its type argument to avoid the file descriptor leakage",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-unix.Malloc",
  "title" : "Clang analyzer unix Malloc",
  "description" : " The clang-analyzer-unix.Malloc check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-exception-escape",
  "title" : "Exception escape",
  "description" : " Finds functions which may throw an exception directly or indirectly, but they should not",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-transparent-functors",
  "title" : "Use transparent functors",
  "description" : " Prefer transparent functors to non-transparent ones",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-nullptr",
  "title" : "Use nullptr",
  "description" : " The check converts the usage of null pointer constants (eg",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-bad-signal-to-kill-thread",
  "title" : "Bad signal to kill thread",
  "description" : " Finds `pthread_kill` function calls when a thread is terminated by raising `SIGTERM` signal and the signal kills the entire process, not just the individual thread",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-string-literal-with-embedded-nul",
  "title" : "String literal with embedded nul",
  "description" : " Finds occurrences of string literal with embedded NUL character and validates their usage",
  "parameters" : [ ]
}, {
  "patternId" : "cert-err60-cpp",
  "title" : "Cert err60 cpp",
  "description" : " This check flags all throw expressions where the exception object is not nothrow copy constructible",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.gets",
  "title" : "Clang analyzer security insecureAPI gets",
  "description" : " The clang-analyzer-security.insecureAPI.gets check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "fuchsia-default-arguments-calls",
  "title" : "Fuchsia default arguments calls",
  "description" : " Warns if a function or method is called with default arguments",
  "parameters" : [ ]
}, {
  "patternId" : "portability-simd-intrinsics",
  "title" : "Simd intrinsics",
  "description" : " Finds SIMD intrinsics calls and suggests `std::experimental::simd` (P0214 alternatives",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.getpw",
  "title" : "Clang analyzer security insecureAPI getpw",
  "description" : " The clang-analyzer-security.insecureAPI.getpw check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "misc-misplaced-const",
  "title" : "Misplaced const",
  "description" : " This check diagnoses when a `const` qualifier is applied to a `typedef` to a pointer type rather than to the pointee, because such constructs are often misleading to developers because the `const` applies to the pointer rather than the pointee",
  "parameters" : [ ]
}, {
  "patternId" : "readability-braces-around-statements",
  "title" : "Braces around statements",
  "description" : " google-readability-braces-around-statements redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-dangling-handle",
  "title" : "Dangling handle",
  "description" : " Detect dangling references in value handles like `std::experimental::string_view`",
  "parameters" : [ ]
}, {
  "patternId" : "readability-redundant-control-flow",
  "title" : "Redundant control flow",
  "description" : " This check looks for procedures (functions returning no value) with `return` statements at the end of the function",
  "parameters" : [ ]
}, {
  "patternId" : "google-readability-namespace-comments",
  "title" : "Google readability namespace comments",
  "description" : " The google-readability-namespace-comments check is an alias, please see llvm-namespace-comment for more information",
  "parameters" : [ ]
}, {
  "patternId" : "readability-redundant-string-cstr",
  "title" : "Redundant string cstr",
  "description" : " Finds unnecessary calls to `std::string::c_str()` and `std::string::data()`",
  "parameters" : [ ]
}, {
  "patternId" : "readability-container-size-empty",
  "title" : "Container size empty",
  "description" : " Checks whether a call to the `size()` method can be replaced with a call to `empty()`",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-accept",
  "title" : "Android cloexec accept",
  "description" : " The usage of `accept()` is not recommended, it's better to use `accept4()`",
  "parameters" : [ ]
}, {
  "patternId" : "cert-dcl21-cpp",
  "title" : "Cert dcl21 cpp",
  "description" : " This check flags postfix `operator++` and `operator--` declarations if the return type is not a const object",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-signed-bitwise",
  "title" : "Signed bitwise",
  "description" : " Finds uses of bitwise operations on signed integer types, which may lead to undefined or implementation defined behaviour",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-duration-conversion-cast",
  "title" : "Abseil duration conversion cast",
  "description" : " Checks for casts of `absl::Duration` conversion functions, and recommends the right conversion function instead",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-make-shared",
  "title" : "Make shared",
  "description" : " This check finds the creation of `std::shared_ptr` objects by explicitly calling the constructor and a `new` expression, and replaces it with a call to `std::make_shared`",
  "parameters" : [ ]
}, {
  "patternId" : "readability-string-compare",
  "title" : "String compare",
  "description" : " Finds string comparisons using the compare method",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-bounds-constant-array-index",
  "title" : "Pro bounds constant array index",
  "description" : " This check flags all array subscript expressions on static arrays and `std::arrays` that either do not have a constant integer expression index or are out of bounds (for `std::array`)",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-default",
  "title" : "Use default",
  "description" : "modernize-use-default =====================  This check has been renamed to modernize-use-equals-default",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-multiple-statement-macro",
  "title" : "Multiple statement macro",
  "description" : " Detect multiple statement macros that are used in unbraced conditionals",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-nodiscard",
  "title" : "Use nodiscard",
  "description" : " Adds `[[nodiscard]]` attributes (introduced in C++17) to member functions in order to highlight at compile time which return values should not be ignored",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-string-integer-assignment",
  "title" : "String integer assignment",
  "description" : " The check finds assignments of an integer to `std::basic_string` (`std::string`, `std::wstring`, etc.)",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-cplusplus.NewDelete",
  "title" : "Clang analyzer cplusplus NewDelete",
  "description" : " The clang-analyzer-cplusplus.NewDelete check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cert-err61-cpp",
  "title" : "Cert err61 cpp",
  "description" : " The cert-err61-cpp check is an alias, please see misc-throw-by-value-catch-by-reference for more information",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-no-internal-dependencies",
  "title" : "Abseil no internal dependencies",
  "description" : " Warns if code using Abseil depends on internal details",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.SelfInit",
  "title" : "Clang analyzer osx cocoa SelfInit",
  "description" : " The clang-analyzer-osx.cocoa.SelfInit check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "readability-redundant-preprocessor",
  "title" : "Redundant preprocessor",
  "description" : " Finds potentially redundant preprocessor directives",
  "parameters" : [ ]
}, {
  "patternId" : "misc-static-assert",
  "title" : "Static assert",
  "description" : " cert-dcl03-c redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-avoid-goto",
  "title" : "Avoid goto",
  "description" : " The hicpp-avoid-goto check is an alias to cppcoreguidelines-avoid-goto",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-dynamic-static-initializers",
  "title" : "Dynamic static initializers",
  "description" : " Finds instances of static variables that are dynamically initialized in header files",
  "parameters" : [ ]
}, {
  "patternId" : "cert-flp30-c",
  "title" : "Cert flp30 c",
  "description" : " This check flags `for` loops where the induction expression has a floating-point type",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker",
  "title" : "Clang analyzer optin osx cocoa localizability NonLocalizedStringChecker",
  "description" : "=======================================================================  The clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-no-malloc",
  "title" : "No malloc",
  "description" : " This check handles C-Style memory management using `malloc()`, `realloc()`, `calloc()` and `free()`",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-function-size",
  "title" : "Function size",
  "description" : " This check is an alias for readability-function-size",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-copy-constructor-init",
  "title" : "Copy constructor init",
  "description" : " Finds copy constructors where the constructor doesn't call the copy constructor of the base class",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-avoid-bind",
  "title" : "Avoid bind",
  "description" : " The check finds uses of `std::bind` and `boost::bind` and replaces them with lambdas",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-optin.performance.GCDAntipattern",
  "title" : "Clang analyzer optin performance GCDAntipattern",
  "description" : " Check for performance anti-patterns when using Grand Central Dispatch",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-multiway-paths-covered",
  "title" : "Multiway paths covered",
  "description" : " This check discovers situations where code paths are not fully-covered",
  "parameters" : [ ]
}, {
  "patternId" : "performance-for-range-copy",
  "title" : "For range copy",
  "description" : " Finds C++11 for ranges where the loop variable is copied in each iteration but it would suffice to obtain it by const reference",
  "parameters" : [ ]
}, {
  "patternId" : "readability-inconsistent-declaration-parameter-name",
  "title" : "Inconsistent declaration parameter name",
  "description" : " Find function declarations which differ in parameter names",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-trailing-return-type",
  "title" : "Use trailing return type",
  "description" : " Rewrites function signatures to use a trailing return type (introduced in C++11)",
  "parameters" : [ ]
}, {
  "patternId" : "readability-isolate-declaration",
  "title" : "Isolate declaration",
  "description" : " Detects local variable declarations declaring more than one variable and tries to refactor the code to one statement per declaration",
  "parameters" : [ ]
}, {
  "patternId" : "misc-unused-using-decls",
  "title" : "Unused using decls",
  "description" : " Finds unused `using` declarations",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-use-noexcept",
  "title" : "Use noexcept",
  "description" : " The hicpp-use-noexcept check is an alias, please see modernize-use-noexcept for more information",
  "parameters" : [ ]
}, {
  "patternId" : "google-readability-casting",
  "title" : "Google readability casting",
  "description" : " Finds usages of C-style casts",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-avoid-c-arrays",
  "title" : "Avoid c arrays",
  "description" : " The hicpp-avoid-c-arrays check is an alias, please see modernize-avoid-c-arrays for more information",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-auto",
  "title" : "Use auto",
  "description" : " This check is responsible for using the `auto` type specifier for variable declarations to *improve code readability and maintainability*",
  "parameters" : [ ]
}, {
  "patternId" : "llvm-header-guard",
  "title" : "Llvm header guard",
  "description" : " Finds and fixes header guards that do not adhere to LLVM style",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-undelegated-constructor",
  "title" : "Undelegated constructor",
  "description" : " This check is an alias for bugprone-undelegated-constructor",
  "parameters" : [ ]
}, {
  "patternId" : "performance-unnecessary-value-param",
  "title" : "Unnecessary value param",
  "description" : " Flags value parameter declarations of expensive to copy types that are copied for each invocation but it would suffice to pass them by const reference",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.NilArg",
  "title" : "Clang analyzer osx cocoa NilArg",
  "description" : " The clang-analyzer-osx.cocoa.NilArg check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "misc-unused-parameters",
  "title" : "Unused parameters",
  "description" : " Finds unused function parameters",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-nullability.NullPassedToNonnull",
  "title" : "Clang analyzer nullability NullPassedToNonnull",
  "description" : " The clang-analyzer-nullability.NullPassedToNonnull check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "performance-no-automatic-move",
  "title" : "No automatic move",
  "description" : " Finds local variables that cannot be automatically moved due to constness",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.NSAutoreleasePool",
  "title" : "Clang analyzer osx cocoa NSAutoreleasePool",
  "description" : " The clang-analyzer-osx.cocoa.NSAutoreleasePool check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-no-namespace",
  "title" : "Abseil no namespace",
  "description" : " Ensures code does not open `namespace absl` as that violates Abseil's compatibility guidelines",
  "parameters" : [ ]
}, {
  "patternId" : "performance-implicit-cast-in-loop",
  "title" : "Implicit cast in loop",
  "description" : "performance-implicit-cast-in-loop =================================  This check has been renamed to performance-implicit-conversion-in-loop",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.ObjCGenerics",
  "title" : "Clang analyzer osx cocoa ObjCGenerics",
  "description" : " The clang-analyzer-osx.cocoa.ObjCGenerics check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-bounds-pointer-arithmetic",
  "title" : "Pro bounds pointer arithmetic",
  "description" : " This check flags all usage of pointer arithmetic, because it could lead to an invalid pointer",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-misplaced-operator-in-strlen-in-alloc",
  "title" : "Misplaced operator in strlen in alloc",
  "description" : " Finds cases where `1` is added to the string in the argument to `strlen()`, `strnlen()`, `strnlen_s()`, `wcslen()`, `wcsnlen()`, and `wcsnlen_s()` instead of the result and the value is used as an argument to a memory allocation function (`malloc()`, `calloc()`, `realloc()`, `alloca()`) or the `new[]` operator in C++",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.MissingSuperCall",
  "title" : "Clang analyzer osx cocoa MissingSuperCall",
  "description" : " Warn about Objective-C methods that lack a necessary call to super",
  "parameters" : [ ]
}, {
  "patternId" : "objc-avoid-nserror-init",
  "title" : "Avoid nserror init",
  "description" : " Finds improper initialization of `NSError` objects",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.ClassRelease",
  "title" : "Clang analyzer osx cocoa ClassRelease",
  "description" : " The clang-analyzer-osx.cocoa.ClassRelease check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker",
  "title" : "Clang analyzer optin osx cocoa localizability EmptyLocalizationContextChecker",
  "description" : "=============================================================================  The clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-vararg",
  "title" : "Vararg",
  "description" : " The hicpp-vararg check is an alias, please see cppcoreguidelines-pro-type-vararg for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cert-msc51-cpp",
  "title" : "Cert msc51 cpp",
  "description" : " This check flags all pseudo-random number engines, engine adaptor instantiations and `srand()` when initialized or seeded with default argument, constant expression or any user-configurable type",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-str-cat-append",
  "title" : "Abseil str cat append",
  "description" : " Flags uses of `absl::StrCat()` to append to a `std::string`",
  "parameters" : [ ]
}, {
  "patternId" : "llvm-prefer-isa-or-dyn-cast-in-conditionals",
  "title" : "Llvm prefer isa or dyn cast in conditionals",
  "description" : " Looks at conditionals and finds and replaces cases of `cast`, which will assert rather than return a null pointer, and `dyn_cast` where the return value is not captured",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-avoid-goto",
  "title" : "Avoid goto",
  "description" : " The usage of `goto` for control flow is error prone and should be replaced with looping constructs",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-suspicious-semicolon",
  "title" : "Suspicious semicolon",
  "description" : " Finds most instances of stray semicolons that unexpectedly alter the meaning of the code",
  "parameters" : [ ]
}, {
  "patternId" : "performance-inefficient-string-concatenation",
  "title" : "Inefficient string concatenation",
  "description" : " This check warns about the performance overhead arising from concatenating strings using the `operator+`, for instance:      std::string a(\"Foo\"), b(\"Bar\");     a = a + b;  Instead of this structure you should use `operator+=` or `std::string`'s (`std::basic_string`) class member function `append()`",
  "parameters" : [ ]
}, {
  "patternId" : "performance-inefficient-vector-operation",
  "title" : "Inefficient vector operation",
  "description" : " Finds possible inefficient `std::vector` operations (e.g",
  "parameters" : [ ]
}, {
  "patternId" : "google-runtime-references",
  "title" : "Google runtime references",
  "description" : " Checks the usage of non-constant references in function parameters",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-unary-static-assert",
  "title" : "Unary static assert",
  "description" : " The check diagnoses any `static_assert` declaration with an empty string literal and provides a fix-it to replace the declaration with a single-argument `static_assert` declaration",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.DynamicTypePropagation",
  "title" : "Clang analyzer core DynamicTypePropagation",
  "description" : " Generate dynamic type information",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-terminating-continue",
  "title" : "Terminating continue",
  "description" : " Detects do while loops with a condition always evaluating to false that have a continue statement, as this continue terminates the loop effectively",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.UnusedIvars",
  "title" : "Clang analyzer osx cocoa UnusedIvars",
  "description" : " The clang-analyzer-osx.cocoa.UnusedIvars check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-avoid-magic-numbers",
  "title" : "Avoid magic numbers",
  "description" : " The cppcoreguidelines-avoid-magic-numbers check is an alias, please see readability-magic-numbers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.NonNullParamChecker",
  "title" : "Clang analyzer core NonNullParamChecker",
  "description" : " The clang-analyzer-core.NonNullParamChecker check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.mkstemp",
  "title" : "Clang analyzer security insecureAPI mkstemp",
  "description" : " The clang-analyzer-security.insecureAPI.mkstemp check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "google-readability-function-size",
  "title" : "Google readability function size",
  "description" : " The google-readability-function-size check is an alias, please see readability-function-size for more information",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-return-braced-init-list",
  "title" : "Return braced init list",
  "description" : " Replaces explicit calls to the constructor in a return with a braced initializer list",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-nullability.NullableReturnedFromNonnull",
  "title" : "Clang analyzer nullability NullableReturnedFromNonnull",
  "description" : " Warns when a nullable pointer is returned from a function that has \\_Nonnull return type",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-inotify-init1",
  "title" : "Android cloexec inotify init1",
  "description" : " `inotify_init1()` should include `IN_CLOEXEC` in its type argument to avoid the file descriptor leakage",
  "parameters" : [ ]
}, {
  "patternId" : "google-global-names-in-headers",
  "title" : "Google global names in headers",
  "description" : " Flag global namespace pollution in header files",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-valist.Unterminated",
  "title" : "Clang analyzer valist Unterminated",
  "description" : " Check for va\\_lists which are not released by a va\\_end call",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-no-assembler",
  "title" : "No assembler",
  "description" : " Check for assembler statements",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-new-delete-operators",
  "title" : "New delete operators",
  "description" : " This check is an alias for misc-new-delete-overloads",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-creat",
  "title" : "Android cloexec creat",
  "description" : " The usage of `creat()` is not recommended, it's better to use `open()`",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-duration-unnecessary-conversion",
  "title" : "Abseil duration unnecessary conversion",
  "description" : " Finds and fixes cases where `absl::Duration` values are being converted to numeric types and back again",
  "parameters" : [ ]
}, {
  "patternId" : "android-comparison-in-temp-failure-retry",
  "title" : "Android comparison in temp failure retry",
  "description" : " Diagnoses comparisons that appear to be incorrectly placed in the argument to the `TEMP_FAILURE_RETRY` macro",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-dup",
  "title" : "Android cloexec dup",
  "description" : " The usage of `dup()` is not recommended, it's better to use `fcntl()`, which can set the close-on-exec flag",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-epoll-create",
  "title" : "Android cloexec epoll create",
  "description" : " The usage of `epoll_create()` is not recommended, it's better to use `epoll_create1()`, which allows close-on-exec",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-unix.MallocSizeof",
  "title" : "Clang analyzer unix MallocSizeof",
  "description" : " The clang-analyzer-unix.MallocSizeof check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-too-small-loop-variable",
  "title" : "Too small loop variable",
  "description" : " Detects those `for` loops that have a loop variable with a \"too small\" type which means this type can't represent all values which are part of the iteration range",
  "parameters" : [ ]
}, {
  "patternId" : "fuchsia-virtual-inheritance",
  "title" : "Fuchsia virtual inheritance",
  "description" : " Warns if classes are defined with virtual inheritance",
  "parameters" : [ ]
}, {
  "patternId" : "cert-oop11-cpp",
  "title" : "Cert oop11 cpp",
  "description" : " The cert-oop11-cpp check is an alias, please see performance-move-constructor-init for more information",
  "parameters" : [ ]
}, {
  "patternId" : "llvm-namespace-comment",
  "title" : "Llvm namespace comment",
  "description" : " google-readability-namespace-comments redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "readability-uppercase-literal-suffix",
  "title" : "Uppercase literal suffix",
  "description" : " cert-dcl16-c redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "google-runtime-int",
  "title" : "Google runtime int",
  "description" : " Finds uses of `short`, `long` and `long long` and suggest replacing them with `u?intXX(_t)?`",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-exception-baseclass",
  "title" : "Exception baseclass",
  "description" : " Ensure that every value that in a `throw` expression is an instance of `std::exception`",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-undefined-memory-manipulation",
  "title" : "Undefined memory manipulation",
  "description" : " Finds calls of memory manipulation functions `memset()`, `memcpy()` and `memmove()` on not TriviallyCopyable objects resulting in undefined behavior",
  "parameters" : [ ]
}, {
  "patternId" : "google-readability-avoid-underscore-in-googletest-name",
  "title" : "Google readability avoid underscore in googletest name",
  "description" : " Checks whether there are underscores in googletest test and test case names in test macros:  -   `TEST` -   `TEST_F` -   `TEST_P` -   `TYPED_TEST` -   `TYPED_TEST_P`  The `FRIEND_TEST` macro is not included",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-equals-default",
  "title" : "Use equals default",
  "description" : " This check replaces default bodies of special member functions with `= default;`",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.bcopy",
  "title" : "Clang analyzer security insecureAPI bcopy",
  "description" : " The clang-analyzer-security.insecureAPI.bcopy check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "readability-else-after-return",
  "title" : "Else after return",
  "description" : " LLVM Coding Standards advises to reduce indentation where possible and where it makes understanding code easier",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-noexcept",
  "title" : "Use noexcept",
  "description" : " This check replaces deprecated dynamic exception specifications with the appropriate noexcept specification (introduced in C++11)",
  "parameters" : [ ]
}, {
  "patternId" : "google-build-namespaces",
  "title" : "Google build namespaces",
  "description" : " cert-dcl59-cpp redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-duration-addition",
  "title" : "Abseil duration addition",
  "description" : " Check for cases where addition should be performed in the `absl::Time` domain",
  "parameters" : [ ]
}, {
  "patternId" : "cert-dcl58-cpp",
  "title" : "Cert dcl58 cpp",
  "description" : " Modification of the `std` or `posix` namespace can result in undefined behavior",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.coreFoundation.containers.PointerSizedValues",
  "title" : "Clang analyzer osx coreFoundation containers PointerSizedValues",
  "description" : "===============================================================  The clang-analyzer-osx.coreFoundation.containers.PointerSizedValues check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "llvm-qualified-auto",
  "title" : "Llvm qualified auto",
  "description" : " The llvm-qualified-auto check is an alias, please see readability-qualified-auto for more information",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-forward-declaration-namespace",
  "title" : "Forward declaration namespace",
  "description" : " Checks if an unused forward declaration is in a wrong namespace",
  "parameters" : [ ]
}, {
  "patternId" : "llvm-twine-local",
  "title" : "Llvm twine local",
  "description" : " Looks for local `Twine` variables which are prone to use after frees and should be generally avoided",
  "parameters" : [ ]
}, {
  "patternId" : "performance-noexcept-move-constructor",
  "title" : "Noexcept move constructor",
  "description" : " The check flags user-defined move constructors and assignment operators not marked with `noexcept` or marked with `noexcept(expr)` where `expr` evaluates to `false` (but is not a `false` literal itself)",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.UndefinedBinaryOperatorResult",
  "title" : "Clang analyzer core UndefinedBinaryOperatorResult",
  "description" : " The clang-analyzer-core.UndefinedBinaryOperatorResult check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-nullability.NullableDereferenced",
  "title" : "Clang analyzer nullability NullableDereferenced",
  "description" : " The clang-analyzer-nullability.NullableDereferenced check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "google-runtime-operator",
  "title" : "Google runtime operator",
  "description" : " Finds overloads of unary `operator &`",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.rand",
  "title" : "Clang analyzer security insecureAPI rand",
  "description" : " The clang-analyzer-security.insecureAPI.rand check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "readability-implicit-bool-conversion",
  "title" : "Implicit bool conversion",
  "description" : " This check can be used to find implicit conversions between built-in types and booleans",
  "parameters" : [ ]
}, {
  "patternId" : "performance-move-constructor-init",
  "title" : "Move constructor init",
  "description" : " \"cert-oop11-cpp\" redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-virtual-near-miss",
  "title" : "Virtual near miss",
  "description" : " Warn if a function is a near miss (ie",
  "parameters" : [ ]
}, {
  "patternId" : "cert-mem57-cpp",
  "title" : "Cert mem57 cpp",
  "description" : " This check flags uses of default `operator new` where the type has extended alignment (an alignment greater than the fundamental alignment)",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-slicing",
  "title" : "Slicing",
  "description" : " Flags slicing of member variables or vtable",
  "parameters" : [ ]
}, {
  "patternId" : "linuxkernel-must-use-errs",
  "title" : "Linuxkernel must use errs",
  "description" : " Checks Linux kernel code to see if it uses the results from the functions in `linux/err.h`",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-suspicious-missing-comma",
  "title" : "Suspicious missing comma",
  "description" : " String literals placed side-by-side are concatenated at translation phase 6 (after the preprocessor)",
  "parameters" : [ ]
}, {
  "patternId" : "misc-new-delete-overloads",
  "title" : "New delete overloads",
  "description" : " cert-dcl54-cpp redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "cert-oop54-cpp",
  "title" : "Cert oop54 cpp",
  "description" : " The cert-oop54-cpp check is an alias, please see bugprone-unhandled-self-assignment for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cert-dcl16-c",
  "title" : "Cert dcl16 c",
  "description" : " The cert-dcl16-c check is an alias, please see readability-uppercase-literal-suffix for more information",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-parent-virtual-call",
  "title" : "Parent virtual call",
  "description" : " Detects and fixes calls to grand-...parent virtual methods instead of calls to overridden parent's virtual methods",
  "parameters" : [ ]
}, {
  "patternId" : "cert-dcl59-cpp",
  "title" : "Cert dcl59 cpp",
  "description" : " The cert-dcl59-cpp check is an alias, please see google-build-namespaces for more information",
  "parameters" : [ ]
}, {
  "patternId" : "objc-super-self",
  "title" : "Super self",
  "description" : " Finds invocations of `-self` on super instances in initializers of subclasses of `NSObject` and recommends calling a superclass initializer instead",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-explicit-conversions",
  "title" : "Explicit conversions",
  "description" : " This check is an alias for google-explicit-constructor",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-optin.cplusplus.UninitializedObject",
  "title" : "Clang analyzer optin cplusplus UninitializedObject",
  "description" : " The clang-analyzer-optin.cplusplus.UninitializedObject check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-make-unique",
  "title" : "Make unique",
  "description" : " This check finds the creation of `std::unique_ptr` objects by explicitly calling the constructor and a `new` expression, and replaces it with a call to `std::make_unique`, introduced in C++14",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-no-malloc",
  "title" : "No malloc",
  "description" : " The hicpp-no-malloc check is an alias, please see cppcoreguidelines-no-malloc for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cert-err09-cpp",
  "title" : "Cert err09 cpp",
  "description" : " The cert-err09-cpp check is an alias, please see misc-throw-by-value-catch-by-reference for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.vfork",
  "title" : "Clang analyzer security insecureAPI vfork",
  "description" : " The clang-analyzer-security.insecureAPI.vfork check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "google-readability-braces-around-statements",
  "title" : "Google readability braces around statements",
  "description" : " The google-readability-braces-around-statements check is an alias, please see readability-braces-around-statements for more information",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-concat-nested-namespaces",
  "title" : "Concat nested namespaces",
  "description" : " Checks for use of nested namespaces such as `namespace a { namespace b { .",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-fold-init-type",
  "title" : "Fold init type",
  "description" : " The check flags type mismatches in folds like `std::accumulate` that might result in loss of precision",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-socket",
  "title" : "Android cloexec socket",
  "description" : " `socket()` should include `SOCK_CLOEXEC` in its type argument to avoid the file descriptor leakage",
  "parameters" : [ ]
}, {
  "patternId" : "mpi-buffer-deref",
  "title" : "Mpi buffer deref",
  "description" : " This check verifies if a buffer passed to an MPI (Message Passing Interface) function is sufficiently dereferenced",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-suspicious-string-compare",
  "title" : "Suspicious string compare",
  "description" : " Find suspicious usage of runtime string comparison functions",
  "parameters" : [ ]
}, {
  "patternId" : "cert-dcl50-cpp",
  "title" : "Cert dcl50 cpp",
  "description" : " This check flags all function definitions (but not declarations) of C-style variadic functions",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-equals-delete",
  "title" : "Use equals delete",
  "description" : " This check marks unimplemented private special member functions with `= delete`",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-redundant-strcat-calls",
  "title" : "Abseil redundant strcat calls",
  "description" : " Suggests removal of unnecessary calls to `absl::StrCat` when the result is being passed to another call to `absl::StrCat` or `absl::StrAppend`",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-special-member-functions",
  "title" : "Special member functions",
  "description" : " The check finds classes where some but not all of the special member functions are defined",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-unused-return-value",
  "title" : "Unused return value",
  "description" : " Warns on unused function return values",
  "parameters" : [ ]
}, {
  "patternId" : "readability-misleading-indentation",
  "title" : "Misleading indentation",
  "description" : " Correct indentation helps to understand code",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-unix.API",
  "title" : "Clang analyzer unix API",
  "description" : " The clang-analyzer-unix.API check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-bool-literals",
  "title" : "Use bool literals",
  "description" : " Finds integer literals which are cast to `bool`",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-loop-convert",
  "title" : "Loop convert",
  "description" : " This check converts `for(...; ...; ...)` loops to use the new range-based loops in C++11",
  "parameters" : [ ]
}, {
  "patternId" : "readability-function-size",
  "title" : "Function size",
  "description" : " google-readability-function-size redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "performance-faster-string-find",
  "title" : "Faster string find",
  "description" : " Optimize calls to `std::string::find()` and friends when the needle passed is a single character string literal",
  "parameters" : [ ]
}, {
  "patternId" : "cert-fio38-c",
  "title" : "Cert fio38 c",
  "description" : " The cert-fio38-c check is an alias, please see misc-non-copyable-objects for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.StackAddressEscape",
  "title" : "Clang analyzer core StackAddressEscape",
  "description" : " The clang-analyzer-core.StackAddressEscape check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "openmp-exception-escape",
  "title" : "Openmp exception escape",
  "description" : " Analyzes OpenMP Structured Blocks and checks that no exception escapes out of the Structured Block it was thrown in",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-pass-by-value",
  "title" : "Pass by value",
  "description" : " With move semantics added to the language and the standard library updated with move constructors added for many types it is now interesting to take an argument directly by value, instead of by const-reference, and then copy",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-noexcept-move",
  "title" : "Noexcept move",
  "description" : " This check is an alias for misc-noexcept-moveconstructor",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-emplace",
  "title" : "Use emplace",
  "description" : " The check flags insertions to an STL-style container done by calling the `push_back` method with an explicitly-constructed temporary of the container element type",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-uncaught-exceptions",
  "title" : "Use uncaught exceptions",
  "description" : " This check will warn on calls to `std::uncaught_exception` and replace them with calls to `std::uncaught_exceptions`, since `std::uncaught_exception` was deprecated in C++17",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-nullability.NullablePassedToNonnull",
  "title" : "Clang analyzer nullability NullablePassedToNonnull",
  "description" : " The clang-analyzer-nullability.NullablePassedToNonnull check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-non-private-member-variables-in-classes",
  "title" : "Non private member variables in classes",
  "description" : " The cppcoreguidelines-non-private-member-variables-in-classes check is an alias, please see misc-non-private-member-variables-in-classes for more information",
  "parameters" : [ ]
}, {
  "patternId" : "misc-definitions-in-headers",
  "title" : "Definitions in headers",
  "description" : " Finds non-extern non-inline function and variable definitions in header files, which can lead to potential ODR violations in case these headers are included from multiple translation units",
  "parameters" : [ ]
}, {
  "patternId" : "zircon-temporary-objects",
  "title" : "Temporary objects",
  "description" : " Warns on construction of specific temporary objects in the Zircon kernel",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-forwarding-reference-overload",
  "title" : "Forwarding reference overload",
  "description" : " The check looks for perfect forwarding constructors that can hide copy or move constructors",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-type-reinterpret-cast",
  "title" : "Pro type reinterpret cast",
  "description" : " This check flags all uses of `reinterpret_cast` in C++ code",
  "parameters" : [ ]
}, {
  "patternId" : "cert-err34-c",
  "title" : "Cert err34 c",
  "description" : " This check flags calls to string-to-number conversion functions that do not verify the validity of the conversion, such as `atoi()` or `scanf()`",
  "parameters" : [ ]
}, {
  "patternId" : "cert-msc30-c",
  "title" : "Cert msc30 c",
  "description" : " The cert-msc30-c check is an alias, please see cert-msc50-cpp for more information",
  "parameters" : [ ]
}, {
  "patternId" : "readability-implicit-bool-cast",
  "title" : "Implicit bool cast",
  "description" : "readability-implicit-bool-cast ==============================  This check has been renamed to readability-implicit-bool-conversion",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.AutoreleaseWrite",
  "title" : "Clang analyzer osx cocoa AutoreleaseWrite",
  "description" : " Warn about potentially crashing writes to autoreleasing objects from different autoreleasing pools in Objective-C",
  "parameters" : [ ]
}, {
  "patternId" : "readability-avoid-const-params-in-decls",
  "title" : "Avoid const params in decls",
  "description" : " Checks whether a function declaration has parameters that are top level `const`",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-undelegated-constructor",
  "title" : "Undelegated constructor",
  "description" : " Finds creation of temporary objects in constructors that look like a function call to another constructor of the same class",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-suspicious-enum-usage",
  "title" : "Suspicious enum usage",
  "description" : " The checker detects various cases when an enum is probably misused (as a bitmask )",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-type-member-init",
  "title" : "Pro type member init",
  "description" : " The check flags user-defined constructor definitions that do not initialize all fields that would be left in an undefined state by default construction, e.g",
  "parameters" : [ ]
}, {
  "patternId" : "fuchsia-multiple-inheritance",
  "title" : "Fuchsia multiple inheritance",
  "description" : " Warns if a class inherits from multiple classes that are not pure virtual",
  "parameters" : [ ]
}, {
  "patternId" : "google-build-using-namespace",
  "title" : "Google build using namespace",
  "description" : " Finds `using namespace` directives",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-static-assert",
  "title" : "Static assert",
  "description" : " The hicpp-static-assert check is an alias, please see misc-static-assert for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-avoid-c-arrays",
  "title" : "Avoid c arrays",
  "description" : " The cppcoreguidelines-avoid-c-arrays check is an alias, please see modernize-avoid-c-arrays for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.coreFoundation.CFError",
  "title" : "Clang analyzer osx coreFoundation CFError",
  "description" : " The clang-analyzer-osx.coreFoundation.CFError check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-raw-string-literal",
  "title" : "Raw string literal",
  "description" : " This check selectively replaces string literals containing escaped characters with raw string literals",
  "parameters" : [ ]
}, {
  "patternId" : "objc-missing-hash",
  "title" : "Missing hash",
  "description" : " Finds Objective-C implementations that implement `-isEqual:` without also appropriately implementing `-hash`",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-special-member-functions",
  "title" : "Special member functions",
  "description" : " This check is an alias for cppcoreguidelines-special-member-functions",
  "parameters" : [ ]
}, {
  "patternId" : "cert-oop58-cpp",
  "title" : "Cert oop58 cpp",
  "description" : " Finds assignments to the copied object and its direct or indirect members in copy constructors and copy assignment operators",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-valist.Uninitialized",
  "title" : "Clang analyzer valist Uninitialized",
  "description" : " Check for usages of uninitialized (or already released) va\\_lists",
  "parameters" : [ ]
}, {
  "patternId" : "readability-simplify-boolean-expr",
  "title" : "Simplify boolean expr",
  "description" : " Looks for boolean expressions involving boolean constants and simplifies them to use the appropriate boolean expression directly",
  "parameters" : [ ]
}, {
  "patternId" : "cert-err58-cpp",
  "title" : "Cert err58 cpp",
  "description" : " This check flags all `static` or `thread_local` variable declarations where the initializer for the object may throw an exception",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-uppercase-literal-suffix",
  "title" : "Uppercase literal suffix",
  "description" : " The hicpp-uppercase-literal-suffix check is an alias, please see readability-uppercase-literal-suffix for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak",
  "title" : "Clang analyzer osx cocoa RunLoopAutoreleaseLeak",
  "description" : " Check for leaked memory in autorelease pools that will never be drained",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.uninitialized.ArraySubscript",
  "title" : "Clang analyzer core uninitialized ArraySubscript",
  "description" : " The clang-analyzer-core.uninitialized.ArraySubscript check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "misc-uniqueptr-reset-release",
  "title" : "Uniqueptr reset release",
  "description" : " Find and replace `unique_ptr::reset(release())` with `std::move()`",
  "parameters" : [ ]
}, {
  "patternId" : "cert-dcl03-c",
  "title" : "Cert dcl03 c",
  "description" : " The cert-dcl03-c check is an alias, please see misc-static-assert for more information",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-duration-factory-float",
  "title" : "Abseil duration factory float",
  "description" : " Checks for cases where the floating-point overloads of various `absl::Duration` factory functions are called when the more-efficient integer versions could be used instead",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-shrink-to-fit",
  "title" : "Shrink to fit",
  "description" : " Replace copy and swap tricks on shrinkable containers with the `shrink_to_fit()` method call",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-infinite-loop",
  "title" : "Infinite loop",
  "description" : " Finds obvious infinite loops (loops where the condition variable is not changed at all)",
  "parameters" : [ ]
}, {
  "patternId" : "readability-delete-null-pointer",
  "title" : "Delete null pointer",
  "description" : " Checks the `if` statements where a pointer's existence is checked and then deletes the pointer",
  "parameters" : [ ]
}, {
  "patternId" : "readability-redundant-smartptr-get",
  "title" : "Redundant smartptr get",
  "description" : " Find and remove redundant calls to smart pointer's `.get()` method",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.FloatLoopCounter",
  "title" : "Clang analyzer security FloatLoopCounter",
  "description" : " The clang-analyzer-security.FloatLoopCounter check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "performance-type-promotion-in-math-fn",
  "title" : "Type promotion in math fn",
  "description" : " Finds calls to C math library functions (from `math.h` or, in C++, `cmath`) with implicit `float` to `double` promotions",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-bounds-array-to-pointer-decay",
  "title" : "Pro bounds array to pointer decay",
  "description" : " This check flags all array to pointer decays",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-suspicious-memset-usage",
  "title" : "Suspicious memset usage",
  "description" : " This check finds `memset()` calls with potential mistakes in their arguments",
  "parameters" : [ ]
}, {
  "patternId" : "objc-forbidden-subclassing",
  "title" : "Forbidden subclassing",
  "description" : " Finds Objective-C classes which are subclasses of classes which are not designed to be subclassed",
  "parameters" : [ ]
}, {
  "patternId" : "performance-trivially-destructible",
  "title" : "Trivially destructible",
  "description" : " Finds types that could be made trivially-destructible by removing out-of-line defaulted destructor declarations",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-inotify-init",
  "title" : "Android cloexec inotify init",
  "description" : " The usage of `inotify_init()` is not recommended, it's better to use `inotify_init1()`",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-optin.cplusplus.VirtualCall",
  "title" : "Clang analyzer optin cplusplus VirtualCall",
  "description" : " The clang-analyzer-optin.cplusplus.VirtualCall check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "llvm-include-order",
  "title" : "Llvm include order",
  "description" : " Checks the correct order of `#includes`",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-throw-keyword-missing",
  "title" : "Throw keyword missing",
  "description" : " Warns about a potentially missing `throw` keyword",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-use-override",
  "title" : "Use override",
  "description" : " This check is an alias for modernize-use-override",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.RetainCount",
  "title" : "Clang analyzer osx cocoa RetainCount",
  "description" : " The clang-analyzer-osx.cocoa.RetainCount check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-optin.portability.UnixAPI",
  "title" : "Clang analyzer optin portability UnixAPI",
  "description" : " Finds implementation-defined behavior in UNIX/Posix functions",
  "parameters" : [ ]
}, {
  "patternId" : "cert-msc32-c",
  "title" : "Cert msc32 c",
  "description" : " The cert-msc32-c check is an alias, please see cert-msc51-cpp for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-optin.performance.Padding",
  "title" : "Clang analyzer optin performance Padding",
  "description" : " Check for excessively padded structs",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-branch-clone",
  "title" : "Branch clone",
  "description" : " Checks for repeated branches in `if/else if/else` chains, consecutive repeated branches in `switch` statements and identical true and false branches in conditional operators",
  "parameters" : [ ]
}, {
  "patternId" : "objc-property-declaration",
  "title" : "Property declaration",
  "description" : " Finds property declarations in Objective-C files that do not follow the pattern of property names in Apple's programming guide",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.API",
  "title" : "Clang analyzer osx API",
  "description" : " The clang-analyzer-osx.API check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.ObjCProperty",
  "title" : "Clang analyzer osx ObjCProperty",
  "description" : " Check for proper uses of Objective-C properties",
  "parameters" : [ ]
}, {
  "patternId" : "darwin-avoid-spinlock",
  "title" : "Darwin avoid spinlock",
  "description" : " Finds usages of `OSSpinlock`, which is deprecated due to potential livelock problems",
  "parameters" : [ ]
}, {
  "patternId" : "misc-redundant-expression",
  "title" : "Redundant expression",
  "description" : " Detect redundant expressions which are typically errors due to copy-paste",
  "parameters" : [ ]
}, {
  "patternId" : "readability-non-const-parameter",
  "title" : "Non const parameter",
  "description" : " The check finds function parameters of a pointer type that could be changed to point to a constant type instead",
  "parameters" : [ ]
}, {
  "patternId" : "readability-convert-member-functions-to-static",
  "title" : "Convert member functions to static",
  "description" : " Finds non-static member functions that can be made `static` because the functions don't use `this`",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.NullDereference",
  "title" : "Clang analyzer core NullDereference",
  "description" : " The clang-analyzer-core.NullDereference check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-type-vararg",
  "title" : "Pro type vararg",
  "description" : " This check flags all calls to c-style vararg functions and all use of `va_arg`",
  "parameters" : [ ]
}, {
  "patternId" : "google-upgrade-googletest-case",
  "title" : "Google upgrade googletest case",
  "description" : " Finds uses of deprecated Google Test version 1.9 APIs with names containing `case` and replaces them with equivalent APIs with `suite`",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-replace-random-shuffle",
  "title" : "Replace random shuffle",
  "description" : " This check will find occurrences of `std::random_shuffle` and replace it with `std::shuffle`",
  "parameters" : [ ]
}, {
  "patternId" : "readability-make-member-function-const",
  "title" : "Make member function const",
  "description" : " Finds non-static member functions that can be made `const` because the functions don't use `this` in a non-const way",
  "parameters" : [ ]
}, {
  "patternId" : "fuchsia-header-anon-namespaces",
  "title" : "Fuchsia header anon namespaces",
  "description" : " The fuchsia-header-anon-namespaces check is an alias, please see google-build-namespace for more information",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-redundant-void-arg",
  "title" : "Redundant void arg",
  "description" : " Find and remove redundant `void` argument lists",
  "parameters" : [ ]
}, {
  "patternId" : "google-objc-avoid-throwing-exception",
  "title" : "Google objc avoid throwing exception",
  "description" : " Finds uses of throwing exceptions usages in Objective-C files",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.MIG",
  "title" : "Clang analyzer osx MIG",
  "description" : " Find violations of the Mach Interface Generator calling convention",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-deprecated-ios-base-aliases",
  "title" : "Deprecated ios base aliases",
  "description" : " Detects usage of the deprecated member types of `std::ios_base` and replaces those that have a non-deprecated equivalent",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-valist.CopyToSelf",
  "title" : "Clang analyzer valist CopyToSelf",
  "description" : " Check for va\\_lists which are copied onto itself",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-unix.cstring.NullArg",
  "title" : "Clang analyzer unix cstring NullArg",
  "description" : " The clang-analyzer-unix.cstring.NullArg check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
  "title" : "Clang analyzer security insecureAPI DeprecatedOrUnsafeBufferHandling",
  "description" : "====================================================================  The clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cert-env33-c",
  "title" : "Cert env33 c",
  "description" : " This check flags calls to `system()`, `popen()`, and `_popen()`, which execute a command processor",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-use-nullptr",
  "title" : "Use nullptr",
  "description" : " The hicpp-use-nullptr check is an alias, please see modernize-use-nullptr for more information",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-misplaced-widening-cast",
  "title" : "Misplaced widening cast",
  "description" : " This check will warn when there is a cast of a calculation result to a bigger type",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-c-copy-assignment-signature",
  "title" : "C copy assignment signature",
  "description" : " The cppcoreguidelines-c-copy-assignment-signature check is an alias, please see misc-unconventional-assign-operator for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-deprecated-headers",
  "title" : "Deprecated headers",
  "description" : " The hicpp-deprecated-headers check is an alias, please see modernize-deprecated-headers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-lambda-function-name",
  "title" : "Lambda function name",
  "description" : " Checks for attempts to get the name of a function from within a lambda expression",
  "parameters" : [ ]
}, {
  "patternId" : "cert-dcl54-cpp",
  "title" : "Cert dcl54 cpp",
  "description" : " The cert-dcl54-cpp check is an alias, please see misc-new-delete-overloads for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.VLASize",
  "title" : "Clang analyzer core VLASize",
  "description" : " The clang-analyzer-core.VLASize check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-macro-parentheses",
  "title" : "Macro parentheses",
  "description" : " Finds macros that can have unexpected behaviour due to missing parentheses",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-use-auto",
  "title" : "Use auto",
  "description" : " The hicpp-use-auto check is an alias, please see modernize-use-auto for more information",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-not-null-terminated-result",
  "title" : "Not null terminated result",
  "description" : " Finds function calls where it is possible to cause a not null-terminated result",
  "parameters" : [ ]
}, {
  "patternId" : "performance-move-const-arg",
  "title" : "Move const arg",
  "description" : " The check warns  -   if `std::move()` is called with a constant argument, -   if `std::move()` is called with an argument of a trivially-copyable     type, -   if the result of `std::move()` is passed as a const reference     argument",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-posix-return",
  "title" : "Posix return",
  "description" : " Checks if any calls to `pthread_*` or `posix_*` functions (except `posix_openpt`) expect negative return values",
  "parameters" : [ ]
}, {
  "patternId" : "google-default-arguments",
  "title" : "Google default arguments",
  "description" : " Checks that default arguments are not given for virtual methods",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-narrowing-conversions",
  "title" : "Narrowing conversions",
  "description" : " Checks for silent narrowing conversions, e.g: `int i = 0; i += 0.1;`",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.mktemp",
  "title" : "Clang analyzer security insecureAPI mktemp",
  "description" : " The clang-analyzer-security.insecureAPI.mktemp check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.DivideZero",
  "title" : "Clang analyzer core DivideZero",
  "description" : " The clang-analyzer-core.DivideZero check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-interfaces-global-init",
  "title" : "Interfaces global init",
  "description" : " This check flags initializers of globals that access extern objects, and therefore can lead to order-of-initialization problems",
  "parameters" : [ ]
}, {
  "patternId" : "performance-implicit-conversion-in-loop",
  "title" : "Implicit conversion in loop",
  "description" : " This warning appears in a range-based loop with a loop variable of const ref type where the type of the variable does not match the one returned by the iterator",
  "parameters" : [ ]
}, {
  "patternId" : "misc-unused-alias-decls",
  "title" : "Unused alias decls",
  "description" : " Finds unused namespace alias declarations",
  "parameters" : [ ]
}, {
  "patternId" : "google-objc-global-variable-declaration",
  "title" : "Google objc global variable declaration",
  "description" : " Finds global variable declarations in Objective-C files that do not follow the pattern of variable names in Google's Objective-C Style Guide",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-type-const-cast",
  "title" : "Pro type const cast",
  "description" : " This check flags all uses of `const_cast` in C++ code",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.CallAndMessage",
  "title" : "Clang analyzer core CallAndMessage",
  "description" : " The clang-analyzer-core.CallAndMessage check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-optin.mpi.MPI-Checker",
  "title" : "Clang analyzer optin mpi MPI Checker",
  "description" : " The clang-analyzer-optin.mpi.MPI-Checker check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "readability-const-return-type",
  "title" : "Const return type",
  "description" : " Checks for functions with a `const`-qualified return type and recommends removal of the `const` keyword",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.coreFoundation.CFNumber",
  "title" : "Clang analyzer osx coreFoundation CFNumber",
  "description" : " The clang-analyzer-osx.coreFoundation.CFNumber check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-macro-repeated-side-effects",
  "title" : "Macro repeated side effects",
  "description" : " Checks for repeated argument with side effects in macros",
  "parameters" : [ ]
}, {
  "patternId" : "openmp-use-default-none",
  "title" : "Openmp use default none",
  "description" : " Finds OpenMP directives that are allowed to contain a `default` clause, but either don't specify it or the clause is specified but with the kind other than `none`, and suggests to use the `default(none)` clause",
  "parameters" : [ ]
}, {
  "patternId" : "fuchsia-overloaded-operator",
  "title" : "Fuchsia overloaded operator",
  "description" : " Warns if an operator is overloaded, except for the assignment (copy and move) operators",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.bcmp",
  "title" : "Clang analyzer security insecureAPI bcmp",
  "description" : " The clang-analyzer-security.insecureAPI.bcmp check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-duration-subtraction",
  "title" : "Abseil duration subtraction",
  "description" : " Checks for cases where subtraction should be performed in the `absl::Duration` domain",
  "parameters" : [ ]
}, {
  "patternId" : "fuchsia-trailing-return",
  "title" : "Fuchsia trailing return",
  "description" : " Functions that have trailing returns are disallowed, except for those using `decltype` specifiers and lambda with otherwise unutterable return types",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.VariadicMethodTypes",
  "title" : "Clang analyzer osx cocoa VariadicMethodTypes",
  "description" : " The clang-analyzer-osx.cocoa.VariadicMethodTypes check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-fopen",
  "title" : "Android cloexec fopen",
  "description" : " `fopen()` should include `e` in their mode string; so `re` would be valid",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-cplusplus.InnerPointer",
  "title" : "Clang analyzer cplusplus InnerPointer",
  "description" : " Check for inner pointers of C++ containers used after re/deallocation",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-use-after-move",
  "title" : "Use after move",
  "description" : " Warns if an object is used after it has been moved, for example:      std::string str = \"Hello, world!\\n\";     std::vector messages;     messages.emplace_back(std::move(str));     std::cout << str;  The last line will trigger a warning that `str` is used after it has been moved",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.uninitialized.Branch",
  "title" : "Clang analyzer core uninitialized Branch",
  "description" : " The clang-analyzer-core.uninitialized.Branch check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "performance-unnecessary-copy-initialization",
  "title" : "Unnecessary copy initialization",
  "description" : " Finds local variable declarations that are initialized using the copy constructor of a non-trivially-copyable type but it would suffice to obtain a const reference",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-init-variables",
  "title" : "Init variables",
  "description" : " Checks whether there are local variables that are declared without an initial value",
  "parameters" : [ ]
}, {
  "patternId" : "cert-err52-cpp",
  "title" : "Cert err52 cpp",
  "description" : " This check flags all call expressions involving `setjmp()` and `longjmp()`",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-faster-strsplit-delimiter",
  "title" : "Abseil faster strsplit delimiter",
  "description" : " Finds instances of `absl::StrSplit()` or `absl::MaxSplits()` where the delimiter is a single character string literal and replaces with a character",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.UncheckedReturn",
  "title" : "Clang analyzer security insecureAPI UncheckedReturn",
  "description" : " The clang-analyzer-security.insecureAPI.UncheckedReturn check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "readability-redundant-declaration",
  "title" : "Redundant declaration",
  "description" : " Finds redundant variable and function declarations",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-duration-factory-scale",
  "title" : "Abseil duration factory scale",
  "description" : " Checks for cases where arguments to `absl::Duration` factory functions are scaled internally and could be changed to a different factory function",
  "parameters" : [ ]
}, {
  "patternId" : "fuchsia-default-arguments-declarations",
  "title" : "Fuchsia default arguments declarations",
  "description" : " Warns if a function or method is declared with default parameters",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-unix.MismatchedDeallocator",
  "title" : "Clang analyzer unix MismatchedDeallocator",
  "description" : " The clang-analyzer-unix.MismatchedDeallocator check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-use-equals-delete",
  "title" : "Use equals delete",
  "description" : " This check is an alias for modernize-use-equals-delete",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-cplusplus.NewDeleteLeaks",
  "title" : "Clang analyzer cplusplus NewDeleteLeaks",
  "description" : " The clang-analyzer-cplusplus.NewDeleteLeaks check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.uninitialized.Assign",
  "title" : "Clang analyzer core uninitialized Assign",
  "description" : " The clang-analyzer-core.uninitialized.Assign check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-move-const-arg",
  "title" : "Move const arg",
  "description" : " The hicpp-move-const-arg check is an alias, please see performance-move-const-arg for more information",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-assert-side-effect",
  "title" : "Assert side effect",
  "description" : " Finds `assert()` with side effect",
  "parameters" : [ ]
}, {
  "patternId" : "google-readability-todo",
  "title" : "Google readability todo",
  "description" : " Finds TODO comments without a username or bug number",
  "parameters" : [ ]
}, {
  "patternId" : "fuchsia-statically-constructed-objects",
  "title" : "Fuchsia statically constructed objects",
  "description" : " Warns if global, non-trivial objects with static storage are constructed, unless the object is statically initialized with a `constexpr` constructor or has no explicit constructor",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-time-comparison",
  "title" : "Abseil time comparison",
  "description" : " Prefer comparisons in the `absl::Time` domain instead of the integer domain",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-inaccurate-erase",
  "title" : "Inaccurate erase",
  "description" : " Checks for inaccurate use of the `erase()` method",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.AtSync",
  "title" : "Clang analyzer osx cocoa AtSync",
  "description" : " The clang-analyzer-osx.cocoa.AtSync check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "readability-magic-numbers",
  "title" : "Magic numbers",
  "description" : " Detects magic numbers, integer or floating point literals that are embedded in code and not introduced via constants or symbols",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-use-emplace",
  "title" : "Use emplace",
  "description" : " The hicpp-use-emplace check is an alias, please see modernize-use-emplace for more information",
  "parameters" : [ ]
}, {
  "patternId" : "darwin-dispatch-once-nonstatic",
  "title" : "Darwin dispatch once nonstatic",
  "description" : " Finds declarations of `dispatch_once_t` variables without static or global storage",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.coreFoundation.CFRetainRelease",
  "title" : "Clang analyzer osx coreFoundation CFRetainRelease",
  "description" : " The clang-analyzer-osx.coreFoundation.CFRetainRelease check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-no-array-decay",
  "title" : "No array decay",
  "description" : " The hicpp-no-array-decay check is an alias, please see cppcoreguidelines-pro-bounds-array-to-pointer-decay for more information",
  "parameters" : [ ]
}, {
  "patternId" : "google-explicit-constructor",
  "title" : "Google explicit constructor",
  "description" : " Checks that constructors callable with a single argument and conversion operators are marked explicit to avoid the risk of unintentional implicit conversions",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.NSError",
  "title" : "Clang analyzer osx cocoa NSError",
  "description" : " The clang-analyzer-osx.cocoa.NSError check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-braces-around-statements",
  "title" : "Braces around statements",
  "description" : " The hicpp-braces-around-statements check is an alias, please see readability-braces-around-statements for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.bzero",
  "title" : "Clang analyzer security insecureAPI bzero",
  "description" : " The clang-analyzer-security.insecureAPI.bzero check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-epoll-create1",
  "title" : "Android cloexec epoll create1",
  "description" : " `epoll_create1()` should include `EPOLL_CLOEXEC` in its type argument to avoid the file descriptor leakage",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.IncompatibleMethodTypes",
  "title" : "Clang analyzer osx cocoa IncompatibleMethodTypes",
  "description" : " The clang-analyzer-osx.cocoa.IncompatibleMethodTypes check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.SuperDealloc",
  "title" : "Clang analyzer osx cocoa SuperDealloc",
  "description" : " The clang-analyzer-osx.cocoa.SuperDealloc check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-default-member-init",
  "title" : "Use default member init",
  "description" : " This check converts a default constructor's member initializers into the new default member initializers in C++11",
  "parameters" : [ ]
}, {
  "patternId" : "google-objc-function-naming",
  "title" : "Google objc function naming",
  "description" : " Finds function declarations in Objective-C files that do not follow the pattern described in the Google Objective-C Style Guide",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.coreFoundation.containers.OutOfBounds",
  "title" : "Clang analyzer osx coreFoundation containers OutOfBounds",
  "description" : " The clang-analyzer-osx.coreFoundation.containers.OutOfBounds check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "readability-misplaced-array-index",
  "title" : "Misplaced array index",
  "description" : " This check warns for unusual array index syntax",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-pro-type-union-access",
  "title" : "Pro type union access",
  "description" : " This check flags all access to members of unions",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-open",
  "title" : "Android cloexec open",
  "description" : " A common source of security bugs is code that opens a file without using the `O_CLOEXEC` flag",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-pipe",
  "title" : "Android cloexec pipe",
  "description" : " This check detects usage of `pipe()`",
  "parameters" : [ ]
}, {
  "patternId" : "fuchsia-restrict-system-includes",
  "title" : "Fuchsia restrict system includes",
  "description" : " Checks for allowed system includes and suggests removal of any others",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-macro-usage",
  "title" : "Macro usage",
  "description" : " Finds macro usage that is considered problematic because better language constructs exist for the task",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-using",
  "title" : "Use using",
  "description" : " The check converts the usage of `typedef` with `using` keyword",
  "parameters" : [ ]
}, {
  "patternId" : "readability-static-definition-in-anonymous-namespace",
  "title" : "Static definition in anonymous namespace",
  "description" : " Finds static function and variable definitions in anonymous namespace",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-optin.osx.OSObjectCStyleCast",
  "title" : "Clang analyzer optin osx OSObjectCStyleCast",
  "description" : " Checker for C-style casts of OSObjects",
  "parameters" : [ ]
}, {
  "patternId" : "performance-inefficient-algorithm",
  "title" : "Inefficient algorithm",
  "description" : " Warns on inefficient use of STL algorithms on associative containers",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-core.uninitialized.CapturedBlockVariable",
  "title" : "Clang analyzer core uninitialized CapturedBlockVariable",
  "description" : " Check for blocks that capture uninitialized values",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-move-forwarding-reference",
  "title" : "Move forwarding reference",
  "description" : " Warns if `std::move` is called on a forwarding reference, for example:      template      void foo(T&& t) {       bar(std::move(t));     }  Forwarding references should typically be passed to `std::forward` instead of `std::move`, and this is the fix that will be suggested",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-deprecated-headers",
  "title" : "Deprecated headers",
  "description" : " Some headers from C library were deprecated in C++ and are no longer welcome in C++ codebases",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.Dealloc",
  "title" : "Clang analyzer osx cocoa Dealloc",
  "description" : " The clang-analyzer-osx.cocoa.Dealloc check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "cppcoreguidelines-explicit-virtual-functions",
  "title" : "Explicit virtual functions",
  "description" : " The cppcoreguidelines-explicit-virtual-functions check is an alias, please see modernize-use-override for more information",
  "parameters" : [ ]
}, {
  "patternId" : "google-build-explicit-make-pair",
  "title" : "Google build explicit make pair",
  "description" : " Check that `make_pair`'s template arguments are deduced",
  "parameters" : [ ]
}, {
  "patternId" : "boost-use-to-string",
  "title" : "Boost use to string",
  "description" : " This check finds conversion from integer type like `int` to `std::string` or `std::wstring` using `boost::lexical_cast`, and replace it with calls to `std::to_string` and `std::to_wstring`",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-bool-pointer-implicit-conversion",
  "title" : "Bool pointer implicit conversion",
  "description" : " Checks for conditions based on implicit conversion from a `bool` pointer to `bool`",
  "parameters" : [ ]
}, {
  "patternId" : "cert-pos44-c",
  "title" : "Cert pos44 c",
  "description" : " The cert-pos44-c check is an alias, please see bugprone-bad-signal-to-kill-thread for more information",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-string-constructor",
  "title" : "String constructor",
  "description" : " Finds string constructors that are suspicious and probably errors",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-unhandled-self-assignment",
  "title" : "Unhandled self assignment",
  "description" : " cert-oop54-cpp redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-string-find-startswith",
  "title" : "Abseil string find startswith",
  "description" : " Checks whether a `std::string::find()` result is compared with 0, and suggests replacing with `absl::StartsWith()`",
  "parameters" : [ ]
}, {
  "patternId" : "mpi-type-mismatch",
  "title" : "Mpi type mismatch",
  "description" : " This check verifies if buffer type and MPI (Message Passing Interface) datatype pairs match for used MPI functions",
  "parameters" : [ ]
}, {
  "patternId" : "misc-non-copyable-objects",
  "title" : "Non copyable objects",
  "description" : " cert-fio38-c redirects here as an alias for this check",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-unix.Vfork",
  "title" : "Clang analyzer unix Vfork",
  "description" : " The clang-analyzer-unix.Vfork check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-invalid-access-moved",
  "title" : "Invalid access moved",
  "description" : " This check is an alias for bugprone-use-after-move",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-upgrade-duration-conversions",
  "title" : "Abseil upgrade duration conversions",
  "description" : " Finds calls to `absl::Duration` arithmetic operators and factories whose argument needs an explicit cast to continue compiling after upcoming API changes",
  "parameters" : [ ]
}, {
  "patternId" : "android-cloexec-memfd-create",
  "title" : "Android cloexec memfd create",
  "description" : " `memfd_create()` should include `MFD_CLOEXEC` in its type argument to avoid the file descriptor leakage",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-duration-comparison",
  "title" : "Abseil duration comparison",
  "description" : " Checks for comparisons which should be in the `absl::Duration` domain instead of the floating point or integer domains",
  "parameters" : [ ]
}, {
  "patternId" : "modernize-use-override",
  "title" : "Use override",
  "description" : " Adds `override` (introduced in C++11) to overridden virtual functions and removes `virtual` from those functions as it is not required",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.cocoa.Loops",
  "title" : "Clang analyzer osx cocoa Loops",
  "description" : " Improved modeling of loops using Cocoa collection types",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-unix.cstring.BadSizeArg",
  "title" : "Clang analyzer unix cstring BadSizeArg",
  "description" : " The clang-analyzer-unix.cstring.BadSizeArg check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-cplusplus.Move",
  "title" : "Clang analyzer cplusplus Move",
  "description" : " The clang-analyzer-cplusplus.Move check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "readability-deleted-default",
  "title" : "Deleted default",
  "description" : " Checks that constructors and assignment operators marked as `= default` are not actually deleted by the compiler",
  "parameters" : [ ]
}, {
  "patternId" : "abseil-duration-division",
  "title" : "Abseil duration division",
  "description" : " `absl::Duration` arithmetic works like it does with integers",
  "parameters" : [ ]
}, {
  "patternId" : "readability-redundant-string-init",
  "title" : "Redundant string init",
  "description" : " Finds unnecessary string initializations",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-unused-raii",
  "title" : "Unused raii",
  "description" : " Finds temporaries that look like RAII objects",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.SecKeychainAPI",
  "title" : "Clang analyzer osx SecKeychainAPI",
  "description" : " The clang-analyzer-osx.SecKeychainAPI check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "readability-qualified-auto",
  "title" : "Qualified auto",
  "description" : " Adds pointer and `const` qualifications to `auto`-typed variables that are deduced to pointers and `const` pointers",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-security.insecureAPI.strcpy",
  "title" : "Clang analyzer security insecureAPI strcpy",
  "description" : " The clang-analyzer-security.insecureAPI.strcpy check is an alias, please see Clang Static Analyzer Available Checkers for more information",
  "parameters" : [ ]
}, {
  "patternId" : "hicpp-named-parameter",
  "title" : "Named parameter",
  "description" : " This check is an alias for readability-named-parameter",
  "parameters" : [ ]
}, {
  "patternId" : "readability-redundant-function-ptr-dereference",
  "title" : "Redundant function ptr dereference",
  "description" : " Finds redundant dereferences of a function pointer",
  "parameters" : [ ]
}, {
  "patternId" : "clang-analyzer-osx.OSObjectRetainCount",
  "title" : "Clang analyzer osx OSObjectRetainCount",
  "description" : " Check for leaks and improper reference count management for OSObject",
  "parameters" : [ ]
}, {
  "patternId" : "bugprone-sizeof-expression",
  "title" : "Sizeof expression",
  "description" : " The check finds usages of `sizeof` expressions which are most likely errors",
  "parameters" : [ ]
} ]
